// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: confio/proofs.proto

package com.ics23;

public interface CommitmentProofOrBuilder extends
    // @@protoc_insertion_point(interface_extends:ics23.CommitmentProof)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.ics23.ExistenceProof exist = 1 [json_name = "exist"];</code>
   * @return Whether the exist field is set.
   */
  boolean hasExist();
  /**
   * <code>.ics23.ExistenceProof exist = 1 [json_name = "exist"];</code>
   * @return The exist.
   */
  ExistenceProof getExist();
  /**
   * <code>.ics23.ExistenceProof exist = 1 [json_name = "exist"];</code>
   */
  ExistenceProofOrBuilder getExistOrBuilder();

  /**
   * <code>.ics23.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
   * @return Whether the nonexist field is set.
   */
  boolean hasNonexist();
  /**
   * <code>.ics23.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
   * @return The nonexist.
   */
  NonExistenceProof getNonexist();
  /**
   * <code>.ics23.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
   */
  NonExistenceProofOrBuilder getNonexistOrBuilder();

  /**
   * <code>.ics23.BatchProof batch = 3 [json_name = "batch"];</code>
   * @return Whether the batch field is set.
   */
  boolean hasBatch();
  /**
   * <code>.ics23.BatchProof batch = 3 [json_name = "batch"];</code>
   * @return The batch.
   */
  BatchProof getBatch();
  /**
   * <code>.ics23.BatchProof batch = 3 [json_name = "batch"];</code>
   */
  BatchProofOrBuilder getBatchOrBuilder();

  /**
   * <code>.ics23.CompressedBatchProof compressed = 4 [json_name = "compressed"];</code>
   * @return Whether the compressed field is set.
   */
  boolean hasCompressed();
  /**
   * <code>.ics23.CompressedBatchProof compressed = 4 [json_name = "compressed"];</code>
   * @return The compressed.
   */
  CompressedBatchProof getCompressed();
  /**
   * <code>.ics23.CompressedBatchProof compressed = 4 [json_name = "compressed"];</code>
   */
  CompressedBatchProofOrBuilder getCompressedOrBuilder();

  CommitmentProof.ProofCase getProofCase();
}
