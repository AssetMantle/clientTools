// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/tx/signing/v1beta1/signing.proto

package com.cosmos.tx.signing.v1beta1;

/**
 * <pre>
 * SignatureDescriptor is a convenience type which represents the full data for
 * a signature including the public key of the signer, signing modes and the
 * signature itself. It is primarily used for coordinating signatures between
 * clients.
 * </pre>
 *
 * Protobuf type {@code cosmos.tx.signing.v1beta1.SignatureDescriptor}
 */
public final class SignatureDescriptor extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:cosmos.tx.signing.v1beta1.SignatureDescriptor)
    SignatureDescriptorOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SignatureDescriptor.newBuilder() to construct.
  private SignatureDescriptor(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SignatureDescriptor() {
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new SignatureDescriptor();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return SigningProto.internal_static_cosmos_tx_signing_v1beta1_SignatureDescriptor_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return SigningProto.internal_static_cosmos_tx_signing_v1beta1_SignatureDescriptor_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            SignatureDescriptor.class, Builder.class);
  }

  public interface DataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * single represents a single signer
     * </pre>
     *
     * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1 [json_name = "single"];</code>
     * @return Whether the single field is set.
     */
    boolean hasSingle();
    /**
     * <pre>
     * single represents a single signer
     * </pre>
     *
     * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1 [json_name = "single"];</code>
     * @return The single.
     */
    Data.Single getSingle();
    /**
     * <pre>
     * single represents a single signer
     * </pre>
     *
     * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1 [json_name = "single"];</code>
     */
    Data.SingleOrBuilder getSingleOrBuilder();

    /**
     * <pre>
     * multi represents a multisig signer
     * </pre>
     *
     * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2 [json_name = "multi"];</code>
     * @return Whether the multi field is set.
     */
    boolean hasMulti();
    /**
     * <pre>
     * multi represents a multisig signer
     * </pre>
     *
     * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2 [json_name = "multi"];</code>
     * @return The multi.
     */
    Data.Multi getMulti();
    /**
     * <pre>
     * multi represents a multisig signer
     * </pre>
     *
     * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2 [json_name = "multi"];</code>
     */
    Data.MultiOrBuilder getMultiOrBuilder();

    Data.SumCase getSumCase();
  }
  /**
   * <pre>
   * Data represents signature data
   * </pre>
   *
   * Protobuf type {@code cosmos.tx.signing.v1beta1.SignatureDescriptor.Data}
   */
  public static final class Data extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
      DataOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Data.newBuilder() to construct.
    private Data(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Data() {
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new Data();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SigningProto.internal_static_cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SigningProto.internal_static_cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Data.class, Builder.class);
    }

    public interface SingleOrBuilder extends
        // @@protoc_insertion_point(interface_extends:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * mode is the signing mode of the single signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];</code>
       * @return The enum numeric value on the wire for mode.
       */
      int getModeValue();
      /**
       * <pre>
       * mode is the signing mode of the single signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];</code>
       * @return The mode.
       */
      SignMode getMode();

      /**
       * <pre>
       * signature is the raw signature bytes
       * </pre>
       *
       * <code>bytes signature = 2 [json_name = "signature"];</code>
       * @return The signature.
       */
      com.google.protobuf.ByteString getSignature();
    }
    /**
     * <pre>
     * Single is the signature data for a single signer
     * </pre>
     *
     * Protobuf type {@code cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single}
     */
    public static final class Single extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single)
        SingleOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Single.newBuilder() to construct.
      private Single(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Single() {
        mode_ = 0;
        signature_ = com.google.protobuf.ByteString.EMPTY;
      }

      @Override
      @SuppressWarnings({"unused"})
      protected Object newInstance(
          UnusedPrivateParameter unused) {
        return new Single();
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SigningProto.internal_static_cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Single_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SigningProto.internal_static_cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Single_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Single.class, Builder.class);
      }

      public static final int MODE_FIELD_NUMBER = 1;
      private int mode_ = 0;
      /**
       * <pre>
       * mode is the signing mode of the single signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];</code>
       * @return The enum numeric value on the wire for mode.
       */
      @Override public int getModeValue() {
        return mode_;
      }
      /**
       * <pre>
       * mode is the signing mode of the single signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];</code>
       * @return The mode.
       */
      @Override public SignMode getMode() {
        SignMode result = SignMode.forNumber(mode_);
        return result == null ? SignMode.UNRECOGNIZED : result;
      }

      public static final int SIGNATURE_FIELD_NUMBER = 2;
      private com.google.protobuf.ByteString signature_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * signature is the raw signature bytes
       * </pre>
       *
       * <code>bytes signature = 2 [json_name = "signature"];</code>
       * @return The signature.
       */
      @Override
      public com.google.protobuf.ByteString getSignature() {
        return signature_;
      }

      private byte memoizedIsInitialized = -1;
      @Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (mode_ != SignMode.SIGN_MODE_UNSPECIFIED.getNumber()) {
          output.writeEnum(1, mode_);
        }
        if (!signature_.isEmpty()) {
          output.writeBytes(2, signature_);
        }
        getUnknownFields().writeTo(output);
      }

      @Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (mode_ != SignMode.SIGN_MODE_UNSPECIFIED.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, mode_);
        }
        if (!signature_.isEmpty()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(2, signature_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @Override
      public boolean equals(final Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof Single)) {
          return super.equals(obj);
        }
        Single other = (Single) obj;

        if (mode_ != other.mode_) return false;
        if (!getSignature()
            .equals(other.getSignature())) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + MODE_FIELD_NUMBER;
        hash = (53 * hash) + mode_;
        hash = (37 * hash) + SIGNATURE_FIELD_NUMBER;
        hash = (53 * hash) + getSignature().hashCode();
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static Single parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static Single parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static Single parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static Single parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static Single parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static Single parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static Single parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static Single parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static Single parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static Single parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static Single parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static Single parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(Single prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @Override
      protected Builder newBuilderForType(
          BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Single is the signature data for a single signer
       * </pre>
       *
       * Protobuf type {@code cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single)
          SingleOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return SigningProto.internal_static_cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Single_descriptor;
        }

        @Override
        protected FieldAccessorTable
            internalGetFieldAccessorTable() {
          return SigningProto.internal_static_cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Single_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  Single.class, Builder.class);
        }

        // Construct using com.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single.newBuilder()
        private Builder() {

        }

        private Builder(
            BuilderParent parent) {
          super(parent);

        }
        @Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          mode_ = 0;
          signature_ = com.google.protobuf.ByteString.EMPTY;
          return this;
        }

        @Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return SigningProto.internal_static_cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Single_descriptor;
        }

        @Override
        public Single getDefaultInstanceForType() {
          return Single.getDefaultInstance();
        }

        @Override
        public Single build() {
          Single result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @Override
        public Single buildPartial() {
          Single result = new Single(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(Single result) {
          int from_bitField0_ = bitField0_;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.mode_ = mode_;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.signature_ = signature_;
          }
        }

        @Override
        public Builder clone() {
          return super.clone();
        }
        @Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return super.setField(field, value);
        }
        @Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return super.addRepeatedField(field, value);
        }
        @Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof Single) {
            return mergeFrom((Single)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(Single other) {
          if (other == Single.getDefaultInstance()) return this;
          if (other.mode_ != 0) {
            setModeValue(other.getModeValue());
          }
          if (other.getSignature() != com.google.protobuf.ByteString.EMPTY) {
            setSignature(other.getSignature());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @Override
        public final boolean isInitialized() {
          return true;
        }

        @Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  mode_ = input.readEnum();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 18: {
                  signature_ = input.readBytes();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 18
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int mode_ = 0;
        /**
         * <pre>
         * mode is the signing mode of the single signer
         * </pre>
         *
         * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];</code>
         * @return The enum numeric value on the wire for mode.
         */
        @Override public int getModeValue() {
          return mode_;
        }
        /**
         * <pre>
         * mode is the signing mode of the single signer
         * </pre>
         *
         * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];</code>
         * @param value The enum numeric value on the wire for mode to set.
         * @return This builder for chaining.
         */
        public Builder setModeValue(int value) {
          mode_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * mode is the signing mode of the single signer
         * </pre>
         *
         * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];</code>
         * @return The mode.
         */
        @Override
        public SignMode getMode() {
          SignMode result = SignMode.forNumber(mode_);
          return result == null ? SignMode.UNRECOGNIZED : result;
        }
        /**
         * <pre>
         * mode is the signing mode of the single signer
         * </pre>
         *
         * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];</code>
         * @param value The mode to set.
         * @return This builder for chaining.
         */
        public Builder setMode(SignMode value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000001;
          mode_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * mode is the signing mode of the single signer
         * </pre>
         *
         * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];</code>
         * @return This builder for chaining.
         */
        public Builder clearMode() {
          bitField0_ = (bitField0_ & ~0x00000001);
          mode_ = 0;
          onChanged();
          return this;
        }

        private com.google.protobuf.ByteString signature_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * signature is the raw signature bytes
         * </pre>
         *
         * <code>bytes signature = 2 [json_name = "signature"];</code>
         * @return The signature.
         */
        @Override
        public com.google.protobuf.ByteString getSignature() {
          return signature_;
        }
        /**
         * <pre>
         * signature is the raw signature bytes
         * </pre>
         *
         * <code>bytes signature = 2 [json_name = "signature"];</code>
         * @param value The signature to set.
         * @return This builder for chaining.
         */
        public Builder setSignature(com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          signature_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * signature is the raw signature bytes
         * </pre>
         *
         * <code>bytes signature = 2 [json_name = "signature"];</code>
         * @return This builder for chaining.
         */
        public Builder clearSignature() {
          bitField0_ = (bitField0_ & ~0x00000002);
          signature_ = getDefaultInstance().getSignature();
          onChanged();
          return this;
        }
        @Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single)
      }

      // @@protoc_insertion_point(class_scope:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single)
      private static final Single DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new Single();
      }

      public static Single getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Single>
          PARSER = new com.google.protobuf.AbstractParser<Single>() {
        @Override
        public Single parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<Single> parser() {
        return PARSER;
      }

      @Override
      public com.google.protobuf.Parser<Single> getParserForType() {
        return PARSER;
      }

      @Override
      public Single getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface MultiOrBuilder extends
        // @@protoc_insertion_point(interface_extends:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * bitarray specifies which keys within the multisig are signing
       * </pre>
       *
       * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
       * @return Whether the bitarray field is set.
       */
      boolean hasBitarray();
      /**
       * <pre>
       * bitarray specifies which keys within the multisig are signing
       * </pre>
       *
       * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
       * @return The bitarray.
       */
      com.cosmos.crypto.multisig.v1beta1.CompactBitArray getBitarray();
      /**
       * <pre>
       * bitarray specifies which keys within the multisig are signing
       * </pre>
       *
       * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
       */
      com.cosmos.crypto.multisig.v1beta1.CompactBitArrayOrBuilder getBitarrayOrBuilder();

      /**
       * <pre>
       * signatures is the signatures of the multi-signature
       * </pre>
       *
       * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
       */
      java.util.List<Data>
          getSignaturesList();
      /**
       * <pre>
       * signatures is the signatures of the multi-signature
       * </pre>
       *
       * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
       */
      Data getSignatures(int index);
      /**
       * <pre>
       * signatures is the signatures of the multi-signature
       * </pre>
       *
       * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
       */
      int getSignaturesCount();
      /**
       * <pre>
       * signatures is the signatures of the multi-signature
       * </pre>
       *
       * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
       */
      java.util.List<? extends DataOrBuilder>
          getSignaturesOrBuilderList();
      /**
       * <pre>
       * signatures is the signatures of the multi-signature
       * </pre>
       *
       * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
       */
      DataOrBuilder getSignaturesOrBuilder(
          int index);
    }
    /**
     * <pre>
     * Multi is the signature data for a multisig public key
     * </pre>
     *
     * Protobuf type {@code cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi}
     */
    public static final class Multi extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi)
        MultiOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Multi.newBuilder() to construct.
      private Multi(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Multi() {
        signatures_ = java.util.Collections.emptyList();
      }

      @Override
      @SuppressWarnings({"unused"})
      protected Object newInstance(
          UnusedPrivateParameter unused) {
        return new Multi();
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SigningProto.internal_static_cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Multi_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SigningProto.internal_static_cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Multi_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Multi.class, Builder.class);
      }

      public static final int BITARRAY_FIELD_NUMBER = 1;
      private com.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray_;
      /**
       * <pre>
       * bitarray specifies which keys within the multisig are signing
       * </pre>
       *
       * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
       * @return Whether the bitarray field is set.
       */
      @Override
      public boolean hasBitarray() {
        return bitarray_ != null;
      }
      /**
       * <pre>
       * bitarray specifies which keys within the multisig are signing
       * </pre>
       *
       * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
       * @return The bitarray.
       */
      @Override
      public com.cosmos.crypto.multisig.v1beta1.CompactBitArray getBitarray() {
        return bitarray_ == null ? com.cosmos.crypto.multisig.v1beta1.CompactBitArray.getDefaultInstance() : bitarray_;
      }
      /**
       * <pre>
       * bitarray specifies which keys within the multisig are signing
       * </pre>
       *
       * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
       */
      @Override
      public com.cosmos.crypto.multisig.v1beta1.CompactBitArrayOrBuilder getBitarrayOrBuilder() {
        return bitarray_ == null ? com.cosmos.crypto.multisig.v1beta1.CompactBitArray.getDefaultInstance() : bitarray_;
      }

      public static final int SIGNATURES_FIELD_NUMBER = 2;
      @SuppressWarnings("serial")
      private java.util.List<Data> signatures_;
      /**
       * <pre>
       * signatures is the signatures of the multi-signature
       * </pre>
       *
       * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
       */
      @Override
      public java.util.List<Data> getSignaturesList() {
        return signatures_;
      }
      /**
       * <pre>
       * signatures is the signatures of the multi-signature
       * </pre>
       *
       * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
       */
      @Override
      public java.util.List<? extends DataOrBuilder>
          getSignaturesOrBuilderList() {
        return signatures_;
      }
      /**
       * <pre>
       * signatures is the signatures of the multi-signature
       * </pre>
       *
       * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
       */
      @Override
      public int getSignaturesCount() {
        return signatures_.size();
      }
      /**
       * <pre>
       * signatures is the signatures of the multi-signature
       * </pre>
       *
       * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
       */
      @Override
      public Data getSignatures(int index) {
        return signatures_.get(index);
      }
      /**
       * <pre>
       * signatures is the signatures of the multi-signature
       * </pre>
       *
       * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
       */
      @Override
      public DataOrBuilder getSignaturesOrBuilder(
          int index) {
        return signatures_.get(index);
      }

      private byte memoizedIsInitialized = -1;
      @Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (bitarray_ != null) {
          output.writeMessage(1, getBitarray());
        }
        for (int i = 0; i < signatures_.size(); i++) {
          output.writeMessage(2, signatures_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      @Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (bitarray_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getBitarray());
        }
        for (int i = 0; i < signatures_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, signatures_.get(i));
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @Override
      public boolean equals(final Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof Multi)) {
          return super.equals(obj);
        }
        Multi other = (Multi) obj;

        if (hasBitarray() != other.hasBitarray()) return false;
        if (hasBitarray()) {
          if (!getBitarray()
              .equals(other.getBitarray())) return false;
        }
        if (!getSignaturesList()
            .equals(other.getSignaturesList())) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasBitarray()) {
          hash = (37 * hash) + BITARRAY_FIELD_NUMBER;
          hash = (53 * hash) + getBitarray().hashCode();
        }
        if (getSignaturesCount() > 0) {
          hash = (37 * hash) + SIGNATURES_FIELD_NUMBER;
          hash = (53 * hash) + getSignaturesList().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static Multi parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static Multi parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static Multi parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static Multi parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static Multi parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static Multi parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static Multi parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static Multi parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static Multi parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static Multi parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static Multi parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static Multi parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(Multi prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @Override
      protected Builder newBuilderForType(
          BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Multi is the signature data for a multisig public key
       * </pre>
       *
       * Protobuf type {@code cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi)
          MultiOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return SigningProto.internal_static_cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Multi_descriptor;
        }

        @Override
        protected FieldAccessorTable
            internalGetFieldAccessorTable() {
          return SigningProto.internal_static_cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Multi_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  Multi.class, Builder.class);
        }

        // Construct using com.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.newBuilder()
        private Builder() {

        }

        private Builder(
            BuilderParent parent) {
          super(parent);

        }
        @Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          bitarray_ = null;
          if (bitarrayBuilder_ != null) {
            bitarrayBuilder_.dispose();
            bitarrayBuilder_ = null;
          }
          if (signaturesBuilder_ == null) {
            signatures_ = java.util.Collections.emptyList();
          } else {
            signatures_ = null;
            signaturesBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        @Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return SigningProto.internal_static_cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Multi_descriptor;
        }

        @Override
        public Multi getDefaultInstanceForType() {
          return Multi.getDefaultInstance();
        }

        @Override
        public Multi build() {
          Multi result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @Override
        public Multi buildPartial() {
          Multi result = new Multi(this);
          buildPartialRepeatedFields(result);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartialRepeatedFields(Multi result) {
          if (signaturesBuilder_ == null) {
            if (((bitField0_ & 0x00000002) != 0)) {
              signatures_ = java.util.Collections.unmodifiableList(signatures_);
              bitField0_ = (bitField0_ & ~0x00000002);
            }
            result.signatures_ = signatures_;
          } else {
            result.signatures_ = signaturesBuilder_.build();
          }
        }

        private void buildPartial0(Multi result) {
          int from_bitField0_ = bitField0_;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.bitarray_ = bitarrayBuilder_ == null
                ? bitarray_
                : bitarrayBuilder_.build();
          }
        }

        @Override
        public Builder clone() {
          return super.clone();
        }
        @Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return super.setField(field, value);
        }
        @Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return super.addRepeatedField(field, value);
        }
        @Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof Multi) {
            return mergeFrom((Multi)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(Multi other) {
          if (other == Multi.getDefaultInstance()) return this;
          if (other.hasBitarray()) {
            mergeBitarray(other.getBitarray());
          }
          if (signaturesBuilder_ == null) {
            if (!other.signatures_.isEmpty()) {
              if (signatures_.isEmpty()) {
                signatures_ = other.signatures_;
                bitField0_ = (bitField0_ & ~0x00000002);
              } else {
                ensureSignaturesIsMutable();
                signatures_.addAll(other.signatures_);
              }
              onChanged();
            }
          } else {
            if (!other.signatures_.isEmpty()) {
              if (signaturesBuilder_.isEmpty()) {
                signaturesBuilder_.dispose();
                signaturesBuilder_ = null;
                signatures_ = other.signatures_;
                bitField0_ = (bitField0_ & ~0x00000002);
                signaturesBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getSignaturesFieldBuilder() : null;
              } else {
                signaturesBuilder_.addAllMessages(other.signatures_);
              }
            }
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @Override
        public final boolean isInitialized() {
          return true;
        }

        @Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  input.readMessage(
                      getBitarrayFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
                case 18: {
                  Data m =
                      input.readMessage(
                          Data.parser(),
                          extensionRegistry);
                  if (signaturesBuilder_ == null) {
                    ensureSignaturesIsMutable();
                    signatures_.add(m);
                  } else {
                    signaturesBuilder_.addMessage(m);
                  }
                  break;
                } // case 18
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private com.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.cosmos.crypto.multisig.v1beta1.CompactBitArray, com.cosmos.crypto.multisig.v1beta1.CompactBitArray.Builder, com.cosmos.crypto.multisig.v1beta1.CompactBitArrayOrBuilder> bitarrayBuilder_;
        /**
         * <pre>
         * bitarray specifies which keys within the multisig are signing
         * </pre>
         *
         * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
         * @return Whether the bitarray field is set.
         */
        public boolean hasBitarray() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * bitarray specifies which keys within the multisig are signing
         * </pre>
         *
         * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
         * @return The bitarray.
         */
        public com.cosmos.crypto.multisig.v1beta1.CompactBitArray getBitarray() {
          if (bitarrayBuilder_ == null) {
            return bitarray_ == null ? com.cosmos.crypto.multisig.v1beta1.CompactBitArray.getDefaultInstance() : bitarray_;
          } else {
            return bitarrayBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * bitarray specifies which keys within the multisig are signing
         * </pre>
         *
         * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
         */
        public Builder setBitarray(com.cosmos.crypto.multisig.v1beta1.CompactBitArray value) {
          if (bitarrayBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            bitarray_ = value;
          } else {
            bitarrayBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * bitarray specifies which keys within the multisig are signing
         * </pre>
         *
         * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
         */
        public Builder setBitarray(
            com.cosmos.crypto.multisig.v1beta1.CompactBitArray.Builder builderForValue) {
          if (bitarrayBuilder_ == null) {
            bitarray_ = builderForValue.build();
          } else {
            bitarrayBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * bitarray specifies which keys within the multisig are signing
         * </pre>
         *
         * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
         */
        public Builder mergeBitarray(com.cosmos.crypto.multisig.v1beta1.CompactBitArray value) {
          if (bitarrayBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0) &&
              bitarray_ != null &&
              bitarray_ != com.cosmos.crypto.multisig.v1beta1.CompactBitArray.getDefaultInstance()) {
              getBitarrayBuilder().mergeFrom(value);
            } else {
              bitarray_ = value;
            }
          } else {
            bitarrayBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * bitarray specifies which keys within the multisig are signing
         * </pre>
         *
         * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
         */
        public Builder clearBitarray() {
          bitField0_ = (bitField0_ & ~0x00000001);
          bitarray_ = null;
          if (bitarrayBuilder_ != null) {
            bitarrayBuilder_.dispose();
            bitarrayBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <pre>
         * bitarray specifies which keys within the multisig are signing
         * </pre>
         *
         * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
         */
        public com.cosmos.crypto.multisig.v1beta1.CompactBitArray.Builder getBitarrayBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getBitarrayFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * bitarray specifies which keys within the multisig are signing
         * </pre>
         *
         * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
         */
        public com.cosmos.crypto.multisig.v1beta1.CompactBitArrayOrBuilder getBitarrayOrBuilder() {
          if (bitarrayBuilder_ != null) {
            return bitarrayBuilder_.getMessageOrBuilder();
          } else {
            return bitarray_ == null ?
                com.cosmos.crypto.multisig.v1beta1.CompactBitArray.getDefaultInstance() : bitarray_;
          }
        }
        /**
         * <pre>
         * bitarray specifies which keys within the multisig are signing
         * </pre>
         *
         * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.cosmos.crypto.multisig.v1beta1.CompactBitArray, com.cosmos.crypto.multisig.v1beta1.CompactBitArray.Builder, com.cosmos.crypto.multisig.v1beta1.CompactBitArrayOrBuilder> 
            getBitarrayFieldBuilder() {
          if (bitarrayBuilder_ == null) {
            bitarrayBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.cosmos.crypto.multisig.v1beta1.CompactBitArray, com.cosmos.crypto.multisig.v1beta1.CompactBitArray.Builder, com.cosmos.crypto.multisig.v1beta1.CompactBitArrayOrBuilder>(
                    getBitarray(),
                    getParentForChildren(),
                    isClean());
            bitarray_ = null;
          }
          return bitarrayBuilder_;
        }

        private java.util.List<Data> signatures_ =
          java.util.Collections.emptyList();
        private void ensureSignaturesIsMutable() {
          if (!((bitField0_ & 0x00000002) != 0)) {
            signatures_ = new java.util.ArrayList<Data>(signatures_);
            bitField0_ |= 0x00000002;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            Data, Data.Builder, DataOrBuilder> signaturesBuilder_;

        /**
         * <pre>
         * signatures is the signatures of the multi-signature
         * </pre>
         *
         * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
         */
        public java.util.List<Data> getSignaturesList() {
          if (signaturesBuilder_ == null) {
            return java.util.Collections.unmodifiableList(signatures_);
          } else {
            return signaturesBuilder_.getMessageList();
          }
        }
        /**
         * <pre>
         * signatures is the signatures of the multi-signature
         * </pre>
         *
         * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
         */
        public int getSignaturesCount() {
          if (signaturesBuilder_ == null) {
            return signatures_.size();
          } else {
            return signaturesBuilder_.getCount();
          }
        }
        /**
         * <pre>
         * signatures is the signatures of the multi-signature
         * </pre>
         *
         * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
         */
        public Data getSignatures(int index) {
          if (signaturesBuilder_ == null) {
            return signatures_.get(index);
          } else {
            return signaturesBuilder_.getMessage(index);
          }
        }
        /**
         * <pre>
         * signatures is the signatures of the multi-signature
         * </pre>
         *
         * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
         */
        public Builder setSignatures(
            int index, Data value) {
          if (signaturesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureSignaturesIsMutable();
            signatures_.set(index, value);
            onChanged();
          } else {
            signaturesBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * signatures is the signatures of the multi-signature
         * </pre>
         *
         * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
         */
        public Builder setSignatures(
            int index, Data.Builder builderForValue) {
          if (signaturesBuilder_ == null) {
            ensureSignaturesIsMutable();
            signatures_.set(index, builderForValue.build());
            onChanged();
          } else {
            signaturesBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * signatures is the signatures of the multi-signature
         * </pre>
         *
         * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
         */
        public Builder addSignatures(Data value) {
          if (signaturesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureSignaturesIsMutable();
            signatures_.add(value);
            onChanged();
          } else {
            signaturesBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <pre>
         * signatures is the signatures of the multi-signature
         * </pre>
         *
         * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
         */
        public Builder addSignatures(
            int index, Data value) {
          if (signaturesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureSignaturesIsMutable();
            signatures_.add(index, value);
            onChanged();
          } else {
            signaturesBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * signatures is the signatures of the multi-signature
         * </pre>
         *
         * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
         */
        public Builder addSignatures(
            Data.Builder builderForValue) {
          if (signaturesBuilder_ == null) {
            ensureSignaturesIsMutable();
            signatures_.add(builderForValue.build());
            onChanged();
          } else {
            signaturesBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * signatures is the signatures of the multi-signature
         * </pre>
         *
         * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
         */
        public Builder addSignatures(
            int index, Data.Builder builderForValue) {
          if (signaturesBuilder_ == null) {
            ensureSignaturesIsMutable();
            signatures_.add(index, builderForValue.build());
            onChanged();
          } else {
            signaturesBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * signatures is the signatures of the multi-signature
         * </pre>
         *
         * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
         */
        public Builder addAllSignatures(
            Iterable<? extends Data> values) {
          if (signaturesBuilder_ == null) {
            ensureSignaturesIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, signatures_);
            onChanged();
          } else {
            signaturesBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <pre>
         * signatures is the signatures of the multi-signature
         * </pre>
         *
         * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
         */
        public Builder clearSignatures() {
          if (signaturesBuilder_ == null) {
            signatures_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000002);
            onChanged();
          } else {
            signaturesBuilder_.clear();
          }
          return this;
        }
        /**
         * <pre>
         * signatures is the signatures of the multi-signature
         * </pre>
         *
         * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
         */
        public Builder removeSignatures(int index) {
          if (signaturesBuilder_ == null) {
            ensureSignaturesIsMutable();
            signatures_.remove(index);
            onChanged();
          } else {
            signaturesBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <pre>
         * signatures is the signatures of the multi-signature
         * </pre>
         *
         * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
         */
        public Data.Builder getSignaturesBuilder(
            int index) {
          return getSignaturesFieldBuilder().getBuilder(index);
        }
        /**
         * <pre>
         * signatures is the signatures of the multi-signature
         * </pre>
         *
         * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
         */
        public DataOrBuilder getSignaturesOrBuilder(
            int index) {
          if (signaturesBuilder_ == null) {
            return signatures_.get(index);  } else {
            return signaturesBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <pre>
         * signatures is the signatures of the multi-signature
         * </pre>
         *
         * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
         */
        public java.util.List<? extends DataOrBuilder>
             getSignaturesOrBuilderList() {
          if (signaturesBuilder_ != null) {
            return signaturesBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(signatures_);
          }
        }
        /**
         * <pre>
         * signatures is the signatures of the multi-signature
         * </pre>
         *
         * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
         */
        public Data.Builder addSignaturesBuilder() {
          return getSignaturesFieldBuilder().addBuilder(
              Data.getDefaultInstance());
        }
        /**
         * <pre>
         * signatures is the signatures of the multi-signature
         * </pre>
         *
         * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
         */
        public Data.Builder addSignaturesBuilder(
            int index) {
          return getSignaturesFieldBuilder().addBuilder(
              index, Data.getDefaultInstance());
        }
        /**
         * <pre>
         * signatures is the signatures of the multi-signature
         * </pre>
         *
         * <code>repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];</code>
         */
        public java.util.List<Data.Builder>
             getSignaturesBuilderList() {
          return getSignaturesFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            Data, Data.Builder, DataOrBuilder>
            getSignaturesFieldBuilder() {
          if (signaturesBuilder_ == null) {
            signaturesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                Data, Data.Builder, DataOrBuilder>(
                    signatures_,
                    ((bitField0_ & 0x00000002) != 0),
                    getParentForChildren(),
                    isClean());
            signatures_ = null;
          }
          return signaturesBuilder_;
        }
        @Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi)
      }

      // @@protoc_insertion_point(class_scope:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi)
      private static final Multi DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new Multi();
      }

      public static Multi getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Multi>
          PARSER = new com.google.protobuf.AbstractParser<Multi>() {
        @Override
        public Multi parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<Multi> parser() {
        return PARSER;
      }

      @Override
      public com.google.protobuf.Parser<Multi> getParserForType() {
        return PARSER;
      }

      @Override
      public Multi getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int sumCase_ = 0;
    @SuppressWarnings("serial")
    private Object sum_;
    public enum SumCase
        implements com.google.protobuf.Internal.EnumLite,
            InternalOneOfEnum {
      SINGLE(1),
      MULTI(2),
      SUM_NOT_SET(0);
      private final int value;
      private SumCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @Deprecated
      public static SumCase valueOf(int value) {
        return forNumber(value);
      }

      public static SumCase forNumber(int value) {
        switch (value) {
          case 1: return SINGLE;
          case 2: return MULTI;
          case 0: return SUM_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public SumCase
    getSumCase() {
      return SumCase.forNumber(
          sumCase_);
    }

    public static final int SINGLE_FIELD_NUMBER = 1;
    /**
     * <pre>
     * single represents a single signer
     * </pre>
     *
     * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1 [json_name = "single"];</code>
     * @return Whether the single field is set.
     */
    @Override
    public boolean hasSingle() {
      return sumCase_ == 1;
    }
    /**
     * <pre>
     * single represents a single signer
     * </pre>
     *
     * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1 [json_name = "single"];</code>
     * @return The single.
     */
    @Override
    public Single getSingle() {
      if (sumCase_ == 1) {
         return (Single) sum_;
      }
      return Single.getDefaultInstance();
    }
    /**
     * <pre>
     * single represents a single signer
     * </pre>
     *
     * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1 [json_name = "single"];</code>
     */
    @Override
    public SingleOrBuilder getSingleOrBuilder() {
      if (sumCase_ == 1) {
         return (Single) sum_;
      }
      return Single.getDefaultInstance();
    }

    public static final int MULTI_FIELD_NUMBER = 2;
    /**
     * <pre>
     * multi represents a multisig signer
     * </pre>
     *
     * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2 [json_name = "multi"];</code>
     * @return Whether the multi field is set.
     */
    @Override
    public boolean hasMulti() {
      return sumCase_ == 2;
    }
    /**
     * <pre>
     * multi represents a multisig signer
     * </pre>
     *
     * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2 [json_name = "multi"];</code>
     * @return The multi.
     */
    @Override
    public Multi getMulti() {
      if (sumCase_ == 2) {
         return (Multi) sum_;
      }
      return Multi.getDefaultInstance();
    }
    /**
     * <pre>
     * multi represents a multisig signer
     * </pre>
     *
     * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2 [json_name = "multi"];</code>
     */
    @Override
    public MultiOrBuilder getMultiOrBuilder() {
      if (sumCase_ == 2) {
         return (Multi) sum_;
      }
      return Multi.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (sumCase_ == 1) {
        output.writeMessage(1, (Single) sum_);
      }
      if (sumCase_ == 2) {
        output.writeMessage(2, (Multi) sum_);
      }
      getUnknownFields().writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (sumCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (Single) sum_);
      }
      if (sumCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (Multi) sum_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Data)) {
        return super.equals(obj);
      }
      Data other = (Data) obj;

      if (!getSumCase().equals(other.getSumCase())) return false;
      switch (sumCase_) {
        case 1:
          if (!getSingle()
              .equals(other.getSingle())) return false;
          break;
        case 2:
          if (!getMulti()
              .equals(other.getMulti())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (sumCase_) {
        case 1:
          hash = (37 * hash) + SINGLE_FIELD_NUMBER;
          hash = (53 * hash) + getSingle().hashCode();
          break;
        case 2:
          hash = (37 * hash) + MULTI_FIELD_NUMBER;
          hash = (53 * hash) + getMulti().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Data parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Data parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Data parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Data parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Data parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Data parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Data parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Data parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Data parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Data parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Data parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Data parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Data prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Data represents signature data
     * </pre>
     *
     * Protobuf type {@code cosmos.tx.signing.v1beta1.SignatureDescriptor.Data}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
        DataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SigningProto.internal_static_cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SigningProto.internal_static_cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Data.class, Builder.class);
      }

      // Construct using com.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.newBuilder()
      private Builder() {

      }

      private Builder(
          BuilderParent parent) {
        super(parent);

      }
      @Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (singleBuilder_ != null) {
          singleBuilder_.clear();
        }
        if (multiBuilder_ != null) {
          multiBuilder_.clear();
        }
        sumCase_ = 0;
        sum_ = null;
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SigningProto.internal_static_cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_descriptor;
      }

      @Override
      public Data getDefaultInstanceForType() {
        return Data.getDefaultInstance();
      }

      @Override
      public Data build() {
        Data result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Data buildPartial() {
        Data result = new Data(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(Data result) {
        int from_bitField0_ = bitField0_;
      }

      private void buildPartialOneofs(Data result) {
        result.sumCase_ = sumCase_;
        result.sum_ = this.sum_;
        if (sumCase_ == 1 &&
            singleBuilder_ != null) {
          result.sum_ = singleBuilder_.build();
        }
        if (sumCase_ == 2 &&
            multiBuilder_ != null) {
          result.sum_ = multiBuilder_.build();
        }
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Data) {
          return mergeFrom((Data)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Data other) {
        if (other == Data.getDefaultInstance()) return this;
        switch (other.getSumCase()) {
          case SINGLE: {
            mergeSingle(other.getSingle());
            break;
          }
          case MULTI: {
            mergeMulti(other.getMulti());
            break;
          }
          case SUM_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getSingleFieldBuilder().getBuilder(),
                    extensionRegistry);
                sumCase_ = 1;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getMultiFieldBuilder().getBuilder(),
                    extensionRegistry);
                sumCase_ = 2;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int sumCase_ = 0;
      private Object sum_;
      public SumCase
          getSumCase() {
        return SumCase.forNumber(
            sumCase_);
      }

      public Builder clearSum() {
        sumCase_ = 0;
        sum_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private com.google.protobuf.SingleFieldBuilderV3<
          Single, Single.Builder, SingleOrBuilder> singleBuilder_;
      /**
       * <pre>
       * single represents a single signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1 [json_name = "single"];</code>
       * @return Whether the single field is set.
       */
      @Override
      public boolean hasSingle() {
        return sumCase_ == 1;
      }
      /**
       * <pre>
       * single represents a single signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1 [json_name = "single"];</code>
       * @return The single.
       */
      @Override
      public Single getSingle() {
        if (singleBuilder_ == null) {
          if (sumCase_ == 1) {
            return (Single) sum_;
          }
          return Single.getDefaultInstance();
        } else {
          if (sumCase_ == 1) {
            return singleBuilder_.getMessage();
          }
          return Single.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * single represents a single signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1 [json_name = "single"];</code>
       */
      public Builder setSingle(Single value) {
        if (singleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sum_ = value;
          onChanged();
        } else {
          singleBuilder_.setMessage(value);
        }
        sumCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * single represents a single signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1 [json_name = "single"];</code>
       */
      public Builder setSingle(
          Single.Builder builderForValue) {
        if (singleBuilder_ == null) {
          sum_ = builderForValue.build();
          onChanged();
        } else {
          singleBuilder_.setMessage(builderForValue.build());
        }
        sumCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * single represents a single signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1 [json_name = "single"];</code>
       */
      public Builder mergeSingle(Single value) {
        if (singleBuilder_ == null) {
          if (sumCase_ == 1 &&
              sum_ != Single.getDefaultInstance()) {
            sum_ = Single.newBuilder((Single) sum_)
                .mergeFrom(value).buildPartial();
          } else {
            sum_ = value;
          }
          onChanged();
        } else {
          if (sumCase_ == 1) {
            singleBuilder_.mergeFrom(value);
          } else {
            singleBuilder_.setMessage(value);
          }
        }
        sumCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * single represents a single signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1 [json_name = "single"];</code>
       */
      public Builder clearSingle() {
        if (singleBuilder_ == null) {
          if (sumCase_ == 1) {
            sumCase_ = 0;
            sum_ = null;
            onChanged();
          }
        } else {
          if (sumCase_ == 1) {
            sumCase_ = 0;
            sum_ = null;
          }
          singleBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * single represents a single signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1 [json_name = "single"];</code>
       */
      public Single.Builder getSingleBuilder() {
        return getSingleFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * single represents a single signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1 [json_name = "single"];</code>
       */
      @Override
      public SingleOrBuilder getSingleOrBuilder() {
        if ((sumCase_ == 1) && (singleBuilder_ != null)) {
          return singleBuilder_.getMessageOrBuilder();
        } else {
          if (sumCase_ == 1) {
            return (Single) sum_;
          }
          return Single.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * single represents a single signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1 [json_name = "single"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          Single, Single.Builder, SingleOrBuilder>
          getSingleFieldBuilder() {
        if (singleBuilder_ == null) {
          if (!(sumCase_ == 1)) {
            sum_ = Single.getDefaultInstance();
          }
          singleBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              Single, Single.Builder, SingleOrBuilder>(
                  (Single) sum_,
                  getParentForChildren(),
                  isClean());
          sum_ = null;
        }
        sumCase_ = 1;
        onChanged();
        return singleBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          Multi, Multi.Builder, MultiOrBuilder> multiBuilder_;
      /**
       * <pre>
       * multi represents a multisig signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2 [json_name = "multi"];</code>
       * @return Whether the multi field is set.
       */
      @Override
      public boolean hasMulti() {
        return sumCase_ == 2;
      }
      /**
       * <pre>
       * multi represents a multisig signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2 [json_name = "multi"];</code>
       * @return The multi.
       */
      @Override
      public Multi getMulti() {
        if (multiBuilder_ == null) {
          if (sumCase_ == 2) {
            return (Multi) sum_;
          }
          return Multi.getDefaultInstance();
        } else {
          if (sumCase_ == 2) {
            return multiBuilder_.getMessage();
          }
          return Multi.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * multi represents a multisig signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2 [json_name = "multi"];</code>
       */
      public Builder setMulti(Multi value) {
        if (multiBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sum_ = value;
          onChanged();
        } else {
          multiBuilder_.setMessage(value);
        }
        sumCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * multi represents a multisig signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2 [json_name = "multi"];</code>
       */
      public Builder setMulti(
          Multi.Builder builderForValue) {
        if (multiBuilder_ == null) {
          sum_ = builderForValue.build();
          onChanged();
        } else {
          multiBuilder_.setMessage(builderForValue.build());
        }
        sumCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * multi represents a multisig signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2 [json_name = "multi"];</code>
       */
      public Builder mergeMulti(Multi value) {
        if (multiBuilder_ == null) {
          if (sumCase_ == 2 &&
              sum_ != Multi.getDefaultInstance()) {
            sum_ = Multi.newBuilder((Multi) sum_)
                .mergeFrom(value).buildPartial();
          } else {
            sum_ = value;
          }
          onChanged();
        } else {
          if (sumCase_ == 2) {
            multiBuilder_.mergeFrom(value);
          } else {
            multiBuilder_.setMessage(value);
          }
        }
        sumCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * multi represents a multisig signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2 [json_name = "multi"];</code>
       */
      public Builder clearMulti() {
        if (multiBuilder_ == null) {
          if (sumCase_ == 2) {
            sumCase_ = 0;
            sum_ = null;
            onChanged();
          }
        } else {
          if (sumCase_ == 2) {
            sumCase_ = 0;
            sum_ = null;
          }
          multiBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * multi represents a multisig signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2 [json_name = "multi"];</code>
       */
      public Multi.Builder getMultiBuilder() {
        return getMultiFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * multi represents a multisig signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2 [json_name = "multi"];</code>
       */
      @Override
      public MultiOrBuilder getMultiOrBuilder() {
        if ((sumCase_ == 2) && (multiBuilder_ != null)) {
          return multiBuilder_.getMessageOrBuilder();
        } else {
          if (sumCase_ == 2) {
            return (Multi) sum_;
          }
          return Multi.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * multi represents a multisig signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2 [json_name = "multi"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          Multi, Multi.Builder, MultiOrBuilder>
          getMultiFieldBuilder() {
        if (multiBuilder_ == null) {
          if (!(sumCase_ == 2)) {
            sum_ = Multi.getDefaultInstance();
          }
          multiBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              Multi, Multi.Builder, MultiOrBuilder>(
                  (Multi) sum_,
                  getParentForChildren(),
                  isClean());
          sum_ = null;
        }
        sumCase_ = 2;
        onChanged();
        return multiBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
    }

    // @@protoc_insertion_point(class_scope:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
    private static final Data DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Data();
    }

    public static Data getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Data>
        PARSER = new com.google.protobuf.AbstractParser<Data>() {
      @Override
      public Data parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Data> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Data> getParserForType() {
      return PARSER;
    }

    @Override
    public Data getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int PUBLIC_KEY_FIELD_NUMBER = 1;
  private com.google.protobuf.Any publicKey_;
  /**
   * <pre>
   * public_key is the public key of the signer
   * </pre>
   *
   * <code>.google.protobuf.Any public_key = 1 [json_name = "publicKey"];</code>
   * @return Whether the publicKey field is set.
   */
  @Override
  public boolean hasPublicKey() {
    return publicKey_ != null;
  }
  /**
   * <pre>
   * public_key is the public key of the signer
   * </pre>
   *
   * <code>.google.protobuf.Any public_key = 1 [json_name = "publicKey"];</code>
   * @return The publicKey.
   */
  @Override
  public com.google.protobuf.Any getPublicKey() {
    return publicKey_ == null ? com.google.protobuf.Any.getDefaultInstance() : publicKey_;
  }
  /**
   * <pre>
   * public_key is the public key of the signer
   * </pre>
   *
   * <code>.google.protobuf.Any public_key = 1 [json_name = "publicKey"];</code>
   */
  @Override
  public com.google.protobuf.AnyOrBuilder getPublicKeyOrBuilder() {
    return publicKey_ == null ? com.google.protobuf.Any.getDefaultInstance() : publicKey_;
  }

  public static final int DATA_FIELD_NUMBER = 2;
  private Data data_;
  /**
   * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2 [json_name = "data"];</code>
   * @return Whether the data field is set.
   */
  @Override
  public boolean hasData() {
    return data_ != null;
  }
  /**
   * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2 [json_name = "data"];</code>
   * @return The data.
   */
  @Override
  public Data getData() {
    return data_ == null ? Data.getDefaultInstance() : data_;
  }
  /**
   * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2 [json_name = "data"];</code>
   */
  @Override
  public DataOrBuilder getDataOrBuilder() {
    return data_ == null ? Data.getDefaultInstance() : data_;
  }

  public static final int SEQUENCE_FIELD_NUMBER = 3;
  private long sequence_ = 0L;
  /**
   * <pre>
   * sequence is the sequence of the account, which describes the
   * number of committed transactions signed by a given address. It is used to prevent
   * replay attacks.
   * </pre>
   *
   * <code>uint64 sequence = 3 [json_name = "sequence"];</code>
   * @return The sequence.
   */
  @Override
  public long getSequence() {
    return sequence_;
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (publicKey_ != null) {
      output.writeMessage(1, getPublicKey());
    }
    if (data_ != null) {
      output.writeMessage(2, getData());
    }
    if (sequence_ != 0L) {
      output.writeUInt64(3, sequence_);
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (publicKey_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getPublicKey());
    }
    if (data_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getData());
    }
    if (sequence_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(3, sequence_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof SignatureDescriptor)) {
      return super.equals(obj);
    }
    SignatureDescriptor other = (SignatureDescriptor) obj;

    if (hasPublicKey() != other.hasPublicKey()) return false;
    if (hasPublicKey()) {
      if (!getPublicKey()
          .equals(other.getPublicKey())) return false;
    }
    if (hasData() != other.hasData()) return false;
    if (hasData()) {
      if (!getData()
          .equals(other.getData())) return false;
    }
    if (getSequence()
        != other.getSequence()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasPublicKey()) {
      hash = (37 * hash) + PUBLIC_KEY_FIELD_NUMBER;
      hash = (53 * hash) + getPublicKey().hashCode();
    }
    if (hasData()) {
      hash = (37 * hash) + DATA_FIELD_NUMBER;
      hash = (53 * hash) + getData().hashCode();
    }
    hash = (37 * hash) + SEQUENCE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getSequence());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static SignatureDescriptor parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static SignatureDescriptor parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static SignatureDescriptor parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static SignatureDescriptor parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static SignatureDescriptor parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static SignatureDescriptor parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static SignatureDescriptor parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static SignatureDescriptor parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static SignatureDescriptor parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static SignatureDescriptor parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static SignatureDescriptor parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static SignatureDescriptor parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(SignatureDescriptor prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * SignatureDescriptor is a convenience type which represents the full data for
   * a signature including the public key of the signer, signing modes and the
   * signature itself. It is primarily used for coordinating signatures between
   * clients.
   * </pre>
   *
   * Protobuf type {@code cosmos.tx.signing.v1beta1.SignatureDescriptor}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:cosmos.tx.signing.v1beta1.SignatureDescriptor)
      SignatureDescriptorOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SigningProto.internal_static_cosmos_tx_signing_v1beta1_SignatureDescriptor_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SigningProto.internal_static_cosmos_tx_signing_v1beta1_SignatureDescriptor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SignatureDescriptor.class, Builder.class);
    }

    // Construct using com.cosmos.tx.signing.v1beta1.SignatureDescriptor.newBuilder()
    private Builder() {

    }

    private Builder(
        BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      publicKey_ = null;
      if (publicKeyBuilder_ != null) {
        publicKeyBuilder_.dispose();
        publicKeyBuilder_ = null;
      }
      data_ = null;
      if (dataBuilder_ != null) {
        dataBuilder_.dispose();
        dataBuilder_ = null;
      }
      sequence_ = 0L;
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return SigningProto.internal_static_cosmos_tx_signing_v1beta1_SignatureDescriptor_descriptor;
    }

    @Override
    public SignatureDescriptor getDefaultInstanceForType() {
      return SignatureDescriptor.getDefaultInstance();
    }

    @Override
    public SignatureDescriptor build() {
      SignatureDescriptor result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public SignatureDescriptor buildPartial() {
      SignatureDescriptor result = new SignatureDescriptor(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(SignatureDescriptor result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.publicKey_ = publicKeyBuilder_ == null
            ? publicKey_
            : publicKeyBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.data_ = dataBuilder_ == null
            ? data_
            : dataBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.sequence_ = sequence_;
      }
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof SignatureDescriptor) {
        return mergeFrom((SignatureDescriptor)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(SignatureDescriptor other) {
      if (other == SignatureDescriptor.getDefaultInstance()) return this;
      if (other.hasPublicKey()) {
        mergePublicKey(other.getPublicKey());
      }
      if (other.hasData()) {
        mergeData(other.getData());
      }
      if (other.getSequence() != 0L) {
        setSequence(other.getSequence());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getPublicKeyFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getDataFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 24: {
              sequence_ = input.readUInt64();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.Any publicKey_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> publicKeyBuilder_;
    /**
     * <pre>
     * public_key is the public key of the signer
     * </pre>
     *
     * <code>.google.protobuf.Any public_key = 1 [json_name = "publicKey"];</code>
     * @return Whether the publicKey field is set.
     */
    public boolean hasPublicKey() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * public_key is the public key of the signer
     * </pre>
     *
     * <code>.google.protobuf.Any public_key = 1 [json_name = "publicKey"];</code>
     * @return The publicKey.
     */
    public com.google.protobuf.Any getPublicKey() {
      if (publicKeyBuilder_ == null) {
        return publicKey_ == null ? com.google.protobuf.Any.getDefaultInstance() : publicKey_;
      } else {
        return publicKeyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * public_key is the public key of the signer
     * </pre>
     *
     * <code>.google.protobuf.Any public_key = 1 [json_name = "publicKey"];</code>
     */
    public Builder setPublicKey(com.google.protobuf.Any value) {
      if (publicKeyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        publicKey_ = value;
      } else {
        publicKeyBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * public_key is the public key of the signer
     * </pre>
     *
     * <code>.google.protobuf.Any public_key = 1 [json_name = "publicKey"];</code>
     */
    public Builder setPublicKey(
        com.google.protobuf.Any.Builder builderForValue) {
      if (publicKeyBuilder_ == null) {
        publicKey_ = builderForValue.build();
      } else {
        publicKeyBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * public_key is the public key of the signer
     * </pre>
     *
     * <code>.google.protobuf.Any public_key = 1 [json_name = "publicKey"];</code>
     */
    public Builder mergePublicKey(com.google.protobuf.Any value) {
      if (publicKeyBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          publicKey_ != null &&
          publicKey_ != com.google.protobuf.Any.getDefaultInstance()) {
          getPublicKeyBuilder().mergeFrom(value);
        } else {
          publicKey_ = value;
        }
      } else {
        publicKeyBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * public_key is the public key of the signer
     * </pre>
     *
     * <code>.google.protobuf.Any public_key = 1 [json_name = "publicKey"];</code>
     */
    public Builder clearPublicKey() {
      bitField0_ = (bitField0_ & ~0x00000001);
      publicKey_ = null;
      if (publicKeyBuilder_ != null) {
        publicKeyBuilder_.dispose();
        publicKeyBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * public_key is the public key of the signer
     * </pre>
     *
     * <code>.google.protobuf.Any public_key = 1 [json_name = "publicKey"];</code>
     */
    public com.google.protobuf.Any.Builder getPublicKeyBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getPublicKeyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * public_key is the public key of the signer
     * </pre>
     *
     * <code>.google.protobuf.Any public_key = 1 [json_name = "publicKey"];</code>
     */
    public com.google.protobuf.AnyOrBuilder getPublicKeyOrBuilder() {
      if (publicKeyBuilder_ != null) {
        return publicKeyBuilder_.getMessageOrBuilder();
      } else {
        return publicKey_ == null ?
            com.google.protobuf.Any.getDefaultInstance() : publicKey_;
      }
    }
    /**
     * <pre>
     * public_key is the public key of the signer
     * </pre>
     *
     * <code>.google.protobuf.Any public_key = 1 [json_name = "publicKey"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> 
        getPublicKeyFieldBuilder() {
      if (publicKeyBuilder_ == null) {
        publicKeyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder>(
                getPublicKey(),
                getParentForChildren(),
                isClean());
        publicKey_ = null;
      }
      return publicKeyBuilder_;
    }

    private Data data_;
    private com.google.protobuf.SingleFieldBuilderV3<
        Data, Data.Builder, DataOrBuilder> dataBuilder_;
    /**
     * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2 [json_name = "data"];</code>
     * @return Whether the data field is set.
     */
    public boolean hasData() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2 [json_name = "data"];</code>
     * @return The data.
     */
    public Data getData() {
      if (dataBuilder_ == null) {
        return data_ == null ? Data.getDefaultInstance() : data_;
      } else {
        return dataBuilder_.getMessage();
      }
    }
    /**
     * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2 [json_name = "data"];</code>
     */
    public Builder setData(Data value) {
      if (dataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        data_ = value;
      } else {
        dataBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2 [json_name = "data"];</code>
     */
    public Builder setData(
        Data.Builder builderForValue) {
      if (dataBuilder_ == null) {
        data_ = builderForValue.build();
      } else {
        dataBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2 [json_name = "data"];</code>
     */
    public Builder mergeData(Data value) {
      if (dataBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          data_ != null &&
          data_ != Data.getDefaultInstance()) {
          getDataBuilder().mergeFrom(value);
        } else {
          data_ = value;
        }
      } else {
        dataBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2 [json_name = "data"];</code>
     */
    public Builder clearData() {
      bitField0_ = (bitField0_ & ~0x00000002);
      data_ = null;
      if (dataBuilder_ != null) {
        dataBuilder_.dispose();
        dataBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2 [json_name = "data"];</code>
     */
    public Data.Builder getDataBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getDataFieldBuilder().getBuilder();
    }
    /**
     * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2 [json_name = "data"];</code>
     */
    public DataOrBuilder getDataOrBuilder() {
      if (dataBuilder_ != null) {
        return dataBuilder_.getMessageOrBuilder();
      } else {
        return data_ == null ?
            Data.getDefaultInstance() : data_;
      }
    }
    /**
     * <code>.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2 [json_name = "data"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        Data, Data.Builder, DataOrBuilder>
        getDataFieldBuilder() {
      if (dataBuilder_ == null) {
        dataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            Data, Data.Builder, DataOrBuilder>(
                getData(),
                getParentForChildren(),
                isClean());
        data_ = null;
      }
      return dataBuilder_;
    }

    private long sequence_ ;
    /**
     * <pre>
     * sequence is the sequence of the account, which describes the
     * number of committed transactions signed by a given address. It is used to prevent
     * replay attacks.
     * </pre>
     *
     * <code>uint64 sequence = 3 [json_name = "sequence"];</code>
     * @return The sequence.
     */
    @Override
    public long getSequence() {
      return sequence_;
    }
    /**
     * <pre>
     * sequence is the sequence of the account, which describes the
     * number of committed transactions signed by a given address. It is used to prevent
     * replay attacks.
     * </pre>
     *
     * <code>uint64 sequence = 3 [json_name = "sequence"];</code>
     * @param value The sequence to set.
     * @return This builder for chaining.
     */
    public Builder setSequence(long value) {

      sequence_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * sequence is the sequence of the account, which describes the
     * number of committed transactions signed by a given address. It is used to prevent
     * replay attacks.
     * </pre>
     *
     * <code>uint64 sequence = 3 [json_name = "sequence"];</code>
     * @return This builder for chaining.
     */
    public Builder clearSequence() {
      bitField0_ = (bitField0_ & ~0x00000004);
      sequence_ = 0L;
      onChanged();
      return this;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:cosmos.tx.signing.v1beta1.SignatureDescriptor)
  }

  // @@protoc_insertion_point(class_scope:cosmos.tx.signing.v1beta1.SignatureDescriptor)
  private static final SignatureDescriptor DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new SignatureDescriptor();
  }

  public static SignatureDescriptor getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SignatureDescriptor>
      PARSER = new com.google.protobuf.AbstractParser<SignatureDescriptor>() {
    @Override
    public SignatureDescriptor parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<SignatureDescriptor> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<SignatureDescriptor> getParserForType() {
    return PARSER;
  }

  @Override
  public SignatureDescriptor getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

