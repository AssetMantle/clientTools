// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/tx/v1beta1/tx.proto

package com.cosmos.tx.v1beta1;

/**
 * <pre>
 * ModeInfo describes the signing mode of a single or nested multisig signer.
 * </pre>
 *
 * Protobuf type {@code cosmos.tx.v1beta1.ModeInfo}
 */
public final class ModeInfo extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:cosmos.tx.v1beta1.ModeInfo)
    ModeInfoOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ModeInfo.newBuilder() to construct.
  private ModeInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ModeInfo() {
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new ModeInfo();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return TxProto.internal_static_cosmos_tx_v1beta1_ModeInfo_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return TxProto.internal_static_cosmos_tx_v1beta1_ModeInfo_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            ModeInfo.class, Builder.class);
  }

  public interface SingleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cosmos.tx.v1beta1.ModeInfo.Single)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * mode is the signing mode of the single signer
     * </pre>
     *
     * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];</code>
     * @return The enum numeric value on the wire for mode.
     */
    int getModeValue();
    /**
     * <pre>
     * mode is the signing mode of the single signer
     * </pre>
     *
     * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];</code>
     * @return The mode.
     */
    com.cosmos.tx.signing.v1beta1.SignMode getMode();
  }
  /**
   * <pre>
   * Single is the mode info for a single signer. It is structured as a message
   * to allow for additional fields such as locale for SIGN_MODE_TEXTUAL in the
   * future
   * </pre>
   *
   * Protobuf type {@code cosmos.tx.v1beta1.ModeInfo.Single}
   */
  public static final class Single extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:cosmos.tx.v1beta1.ModeInfo.Single)
      SingleOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Single.newBuilder() to construct.
    private Single(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Single() {
      mode_ = 0;
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new Single();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return TxProto.internal_static_cosmos_tx_v1beta1_ModeInfo_Single_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return TxProto.internal_static_cosmos_tx_v1beta1_ModeInfo_Single_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Single.class, Builder.class);
    }

    public static final int MODE_FIELD_NUMBER = 1;
    private int mode_ = 0;
    /**
     * <pre>
     * mode is the signing mode of the single signer
     * </pre>
     *
     * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];</code>
     * @return The enum numeric value on the wire for mode.
     */
    @Override public int getModeValue() {
      return mode_;
    }
    /**
     * <pre>
     * mode is the signing mode of the single signer
     * </pre>
     *
     * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];</code>
     * @return The mode.
     */
    @Override public com.cosmos.tx.signing.v1beta1.SignMode getMode() {
      com.cosmos.tx.signing.v1beta1.SignMode result = com.cosmos.tx.signing.v1beta1.SignMode.forNumber(mode_);
      return result == null ? com.cosmos.tx.signing.v1beta1.SignMode.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (mode_ != com.cosmos.tx.signing.v1beta1.SignMode.SIGN_MODE_UNSPECIFIED.getNumber()) {
        output.writeEnum(1, mode_);
      }
      getUnknownFields().writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (mode_ != com.cosmos.tx.signing.v1beta1.SignMode.SIGN_MODE_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, mode_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Single)) {
        return super.equals(obj);
      }
      Single other = (Single) obj;

      if (mode_ != other.mode_) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + MODE_FIELD_NUMBER;
      hash = (53 * hash) + mode_;
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Single parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Single parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Single parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Single parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Single parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Single parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Single parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Single parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Single parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Single parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Single parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Single parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Single prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Single is the mode info for a single signer. It is structured as a message
     * to allow for additional fields such as locale for SIGN_MODE_TEXTUAL in the
     * future
     * </pre>
     *
     * Protobuf type {@code cosmos.tx.v1beta1.ModeInfo.Single}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cosmos.tx.v1beta1.ModeInfo.Single)
        SingleOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return TxProto.internal_static_cosmos_tx_v1beta1_ModeInfo_Single_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return TxProto.internal_static_cosmos_tx_v1beta1_ModeInfo_Single_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Single.class, Builder.class);
      }

      // Construct using com.cosmos.tx.v1beta1.ModeInfo.Single.newBuilder()
      private Builder() {

      }

      private Builder(
          BuilderParent parent) {
        super(parent);

      }
      @Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        mode_ = 0;
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return TxProto.internal_static_cosmos_tx_v1beta1_ModeInfo_Single_descriptor;
      }

      @Override
      public Single getDefaultInstanceForType() {
        return Single.getDefaultInstance();
      }

      @Override
      public Single build() {
        Single result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Single buildPartial() {
        Single result = new Single(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(Single result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.mode_ = mode_;
        }
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Single) {
          return mergeFrom((Single)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Single other) {
        if (other == Single.getDefaultInstance()) return this;
        if (other.mode_ != 0) {
          setModeValue(other.getModeValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                mode_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int mode_ = 0;
      /**
       * <pre>
       * mode is the signing mode of the single signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];</code>
       * @return The enum numeric value on the wire for mode.
       */
      @Override public int getModeValue() {
        return mode_;
      }
      /**
       * <pre>
       * mode is the signing mode of the single signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];</code>
       * @param value The enum numeric value on the wire for mode to set.
       * @return This builder for chaining.
       */
      public Builder setModeValue(int value) {
        mode_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * mode is the signing mode of the single signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];</code>
       * @return The mode.
       */
      @Override
      public com.cosmos.tx.signing.v1beta1.SignMode getMode() {
        com.cosmos.tx.signing.v1beta1.SignMode result = com.cosmos.tx.signing.v1beta1.SignMode.forNumber(mode_);
        return result == null ? com.cosmos.tx.signing.v1beta1.SignMode.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * mode is the signing mode of the single signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];</code>
       * @param value The mode to set.
       * @return This builder for chaining.
       */
      public Builder setMode(com.cosmos.tx.signing.v1beta1.SignMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        mode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * mode is the signing mode of the single signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];</code>
       * @return This builder for chaining.
       */
      public Builder clearMode() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mode_ = 0;
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:cosmos.tx.v1beta1.ModeInfo.Single)
    }

    // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.ModeInfo.Single)
    private static final Single DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Single();
    }

    public static Single getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Single>
        PARSER = new com.google.protobuf.AbstractParser<Single>() {
      @Override
      public Single parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Single> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Single> getParserForType() {
      return PARSER;
    }

    @Override
    public Single getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MultiOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cosmos.tx.v1beta1.ModeInfo.Multi)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * bitarray specifies which keys within the multisig are signing
     * </pre>
     *
     * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
     * @return Whether the bitarray field is set.
     */
    boolean hasBitarray();
    /**
     * <pre>
     * bitarray specifies which keys within the multisig are signing
     * </pre>
     *
     * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
     * @return The bitarray.
     */
    com.cosmos.crypto.multisig.v1beta1.CompactBitArray getBitarray();
    /**
     * <pre>
     * bitarray specifies which keys within the multisig are signing
     * </pre>
     *
     * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
     */
    com.cosmos.crypto.multisig.v1beta1.CompactBitArrayOrBuilder getBitarrayOrBuilder();

    /**
     * <pre>
     * mode_infos is the corresponding modes of the signers of the multisig
     * which could include nested multisig public keys
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
     */
    java.util.List<ModeInfo>
        getModeInfosList();
    /**
     * <pre>
     * mode_infos is the corresponding modes of the signers of the multisig
     * which could include nested multisig public keys
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
     */
    ModeInfo getModeInfos(int index);
    /**
     * <pre>
     * mode_infos is the corresponding modes of the signers of the multisig
     * which could include nested multisig public keys
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
     */
    int getModeInfosCount();
    /**
     * <pre>
     * mode_infos is the corresponding modes of the signers of the multisig
     * which could include nested multisig public keys
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
     */
    java.util.List<? extends ModeInfoOrBuilder>
        getModeInfosOrBuilderList();
    /**
     * <pre>
     * mode_infos is the corresponding modes of the signers of the multisig
     * which could include nested multisig public keys
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
     */
    ModeInfoOrBuilder getModeInfosOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Multi is the mode info for a multisig public key
   * </pre>
   *
   * Protobuf type {@code cosmos.tx.v1beta1.ModeInfo.Multi}
   */
  public static final class Multi extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:cosmos.tx.v1beta1.ModeInfo.Multi)
      MultiOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Multi.newBuilder() to construct.
    private Multi(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Multi() {
      modeInfos_ = java.util.Collections.emptyList();
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new Multi();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return TxProto.internal_static_cosmos_tx_v1beta1_ModeInfo_Multi_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return TxProto.internal_static_cosmos_tx_v1beta1_ModeInfo_Multi_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Multi.class, Builder.class);
    }

    public static final int BITARRAY_FIELD_NUMBER = 1;
    private com.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray_;
    /**
     * <pre>
     * bitarray specifies which keys within the multisig are signing
     * </pre>
     *
     * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
     * @return Whether the bitarray field is set.
     */
    @Override
    public boolean hasBitarray() {
      return bitarray_ != null;
    }
    /**
     * <pre>
     * bitarray specifies which keys within the multisig are signing
     * </pre>
     *
     * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
     * @return The bitarray.
     */
    @Override
    public com.cosmos.crypto.multisig.v1beta1.CompactBitArray getBitarray() {
      return bitarray_ == null ? com.cosmos.crypto.multisig.v1beta1.CompactBitArray.getDefaultInstance() : bitarray_;
    }
    /**
     * <pre>
     * bitarray specifies which keys within the multisig are signing
     * </pre>
     *
     * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
     */
    @Override
    public com.cosmos.crypto.multisig.v1beta1.CompactBitArrayOrBuilder getBitarrayOrBuilder() {
      return bitarray_ == null ? com.cosmos.crypto.multisig.v1beta1.CompactBitArray.getDefaultInstance() : bitarray_;
    }

    public static final int MODE_INFOS_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<ModeInfo> modeInfos_;
    /**
     * <pre>
     * mode_infos is the corresponding modes of the signers of the multisig
     * which could include nested multisig public keys
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
     */
    @Override
    public java.util.List<ModeInfo> getModeInfosList() {
      return modeInfos_;
    }
    /**
     * <pre>
     * mode_infos is the corresponding modes of the signers of the multisig
     * which could include nested multisig public keys
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
     */
    @Override
    public java.util.List<? extends ModeInfoOrBuilder>
        getModeInfosOrBuilderList() {
      return modeInfos_;
    }
    /**
     * <pre>
     * mode_infos is the corresponding modes of the signers of the multisig
     * which could include nested multisig public keys
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
     */
    @Override
    public int getModeInfosCount() {
      return modeInfos_.size();
    }
    /**
     * <pre>
     * mode_infos is the corresponding modes of the signers of the multisig
     * which could include nested multisig public keys
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
     */
    @Override
    public ModeInfo getModeInfos(int index) {
      return modeInfos_.get(index);
    }
    /**
     * <pre>
     * mode_infos is the corresponding modes of the signers of the multisig
     * which could include nested multisig public keys
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
     */
    @Override
    public ModeInfoOrBuilder getModeInfosOrBuilder(
        int index) {
      return modeInfos_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (bitarray_ != null) {
        output.writeMessage(1, getBitarray());
      }
      for (int i = 0; i < modeInfos_.size(); i++) {
        output.writeMessage(2, modeInfos_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (bitarray_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getBitarray());
      }
      for (int i = 0; i < modeInfos_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, modeInfos_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Multi)) {
        return super.equals(obj);
      }
      Multi other = (Multi) obj;

      if (hasBitarray() != other.hasBitarray()) return false;
      if (hasBitarray()) {
        if (!getBitarray()
            .equals(other.getBitarray())) return false;
      }
      if (!getModeInfosList()
          .equals(other.getModeInfosList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasBitarray()) {
        hash = (37 * hash) + BITARRAY_FIELD_NUMBER;
        hash = (53 * hash) + getBitarray().hashCode();
      }
      if (getModeInfosCount() > 0) {
        hash = (37 * hash) + MODE_INFOS_FIELD_NUMBER;
        hash = (53 * hash) + getModeInfosList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Multi parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Multi parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Multi parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Multi parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Multi parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Multi parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Multi parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Multi parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Multi parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Multi parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Multi parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Multi parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Multi prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Multi is the mode info for a multisig public key
     * </pre>
     *
     * Protobuf type {@code cosmos.tx.v1beta1.ModeInfo.Multi}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cosmos.tx.v1beta1.ModeInfo.Multi)
        MultiOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return TxProto.internal_static_cosmos_tx_v1beta1_ModeInfo_Multi_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return TxProto.internal_static_cosmos_tx_v1beta1_ModeInfo_Multi_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Multi.class, Builder.class);
      }

      // Construct using com.cosmos.tx.v1beta1.ModeInfo.Multi.newBuilder()
      private Builder() {

      }

      private Builder(
          BuilderParent parent) {
        super(parent);

      }
      @Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        bitarray_ = null;
        if (bitarrayBuilder_ != null) {
          bitarrayBuilder_.dispose();
          bitarrayBuilder_ = null;
        }
        if (modeInfosBuilder_ == null) {
          modeInfos_ = java.util.Collections.emptyList();
        } else {
          modeInfos_ = null;
          modeInfosBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return TxProto.internal_static_cosmos_tx_v1beta1_ModeInfo_Multi_descriptor;
      }

      @Override
      public Multi getDefaultInstanceForType() {
        return Multi.getDefaultInstance();
      }

      @Override
      public Multi build() {
        Multi result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Multi buildPartial() {
        Multi result = new Multi(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(Multi result) {
        if (modeInfosBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            modeInfos_ = java.util.Collections.unmodifiableList(modeInfos_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.modeInfos_ = modeInfos_;
        } else {
          result.modeInfos_ = modeInfosBuilder_.build();
        }
      }

      private void buildPartial0(Multi result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.bitarray_ = bitarrayBuilder_ == null
              ? bitarray_
              : bitarrayBuilder_.build();
        }
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Multi) {
          return mergeFrom((Multi)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Multi other) {
        if (other == Multi.getDefaultInstance()) return this;
        if (other.hasBitarray()) {
          mergeBitarray(other.getBitarray());
        }
        if (modeInfosBuilder_ == null) {
          if (!other.modeInfos_.isEmpty()) {
            if (modeInfos_.isEmpty()) {
              modeInfos_ = other.modeInfos_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureModeInfosIsMutable();
              modeInfos_.addAll(other.modeInfos_);
            }
            onChanged();
          }
        } else {
          if (!other.modeInfos_.isEmpty()) {
            if (modeInfosBuilder_.isEmpty()) {
              modeInfosBuilder_.dispose();
              modeInfosBuilder_ = null;
              modeInfos_ = other.modeInfos_;
              bitField0_ = (bitField0_ & ~0x00000002);
              modeInfosBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getModeInfosFieldBuilder() : null;
            } else {
              modeInfosBuilder_.addAllMessages(other.modeInfos_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getBitarrayFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                ModeInfo m =
                    input.readMessage(
                        ModeInfo.parser(),
                        extensionRegistry);
                if (modeInfosBuilder_ == null) {
                  ensureModeInfosIsMutable();
                  modeInfos_.add(m);
                } else {
                  modeInfosBuilder_.addMessage(m);
                }
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.crypto.multisig.v1beta1.CompactBitArray, com.cosmos.crypto.multisig.v1beta1.CompactBitArray.Builder, com.cosmos.crypto.multisig.v1beta1.CompactBitArrayOrBuilder> bitarrayBuilder_;
      /**
       * <pre>
       * bitarray specifies which keys within the multisig are signing
       * </pre>
       *
       * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
       * @return Whether the bitarray field is set.
       */
      public boolean hasBitarray() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * bitarray specifies which keys within the multisig are signing
       * </pre>
       *
       * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
       * @return The bitarray.
       */
      public com.cosmos.crypto.multisig.v1beta1.CompactBitArray getBitarray() {
        if (bitarrayBuilder_ == null) {
          return bitarray_ == null ? com.cosmos.crypto.multisig.v1beta1.CompactBitArray.getDefaultInstance() : bitarray_;
        } else {
          return bitarrayBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * bitarray specifies which keys within the multisig are signing
       * </pre>
       *
       * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
       */
      public Builder setBitarray(com.cosmos.crypto.multisig.v1beta1.CompactBitArray value) {
        if (bitarrayBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitarray_ = value;
        } else {
          bitarrayBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * bitarray specifies which keys within the multisig are signing
       * </pre>
       *
       * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
       */
      public Builder setBitarray(
          com.cosmos.crypto.multisig.v1beta1.CompactBitArray.Builder builderForValue) {
        if (bitarrayBuilder_ == null) {
          bitarray_ = builderForValue.build();
        } else {
          bitarrayBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * bitarray specifies which keys within the multisig are signing
       * </pre>
       *
       * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
       */
      public Builder mergeBitarray(com.cosmos.crypto.multisig.v1beta1.CompactBitArray value) {
        if (bitarrayBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            bitarray_ != null &&
            bitarray_ != com.cosmos.crypto.multisig.v1beta1.CompactBitArray.getDefaultInstance()) {
            getBitarrayBuilder().mergeFrom(value);
          } else {
            bitarray_ = value;
          }
        } else {
          bitarrayBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * bitarray specifies which keys within the multisig are signing
       * </pre>
       *
       * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
       */
      public Builder clearBitarray() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bitarray_ = null;
        if (bitarrayBuilder_ != null) {
          bitarrayBuilder_.dispose();
          bitarrayBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * bitarray specifies which keys within the multisig are signing
       * </pre>
       *
       * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
       */
      public com.cosmos.crypto.multisig.v1beta1.CompactBitArray.Builder getBitarrayBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getBitarrayFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * bitarray specifies which keys within the multisig are signing
       * </pre>
       *
       * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
       */
      public com.cosmos.crypto.multisig.v1beta1.CompactBitArrayOrBuilder getBitarrayOrBuilder() {
        if (bitarrayBuilder_ != null) {
          return bitarrayBuilder_.getMessageOrBuilder();
        } else {
          return bitarray_ == null ?
              com.cosmos.crypto.multisig.v1beta1.CompactBitArray.getDefaultInstance() : bitarray_;
        }
      }
      /**
       * <pre>
       * bitarray specifies which keys within the multisig are signing
       * </pre>
       *
       * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.crypto.multisig.v1beta1.CompactBitArray, com.cosmos.crypto.multisig.v1beta1.CompactBitArray.Builder, com.cosmos.crypto.multisig.v1beta1.CompactBitArrayOrBuilder> 
          getBitarrayFieldBuilder() {
        if (bitarrayBuilder_ == null) {
          bitarrayBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.cosmos.crypto.multisig.v1beta1.CompactBitArray, com.cosmos.crypto.multisig.v1beta1.CompactBitArray.Builder, com.cosmos.crypto.multisig.v1beta1.CompactBitArrayOrBuilder>(
                  getBitarray(),
                  getParentForChildren(),
                  isClean());
          bitarray_ = null;
        }
        return bitarrayBuilder_;
      }

      private java.util.List<ModeInfo> modeInfos_ =
        java.util.Collections.emptyList();
      private void ensureModeInfosIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          modeInfos_ = new java.util.ArrayList<ModeInfo>(modeInfos_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          ModeInfo, ModeInfo.Builder, ModeInfoOrBuilder> modeInfosBuilder_;

      /**
       * <pre>
       * mode_infos is the corresponding modes of the signers of the multisig
       * which could include nested multisig public keys
       * </pre>
       *
       * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
       */
      public java.util.List<ModeInfo> getModeInfosList() {
        if (modeInfosBuilder_ == null) {
          return java.util.Collections.unmodifiableList(modeInfos_);
        } else {
          return modeInfosBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * mode_infos is the corresponding modes of the signers of the multisig
       * which could include nested multisig public keys
       * </pre>
       *
       * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
       */
      public int getModeInfosCount() {
        if (modeInfosBuilder_ == null) {
          return modeInfos_.size();
        } else {
          return modeInfosBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * mode_infos is the corresponding modes of the signers of the multisig
       * which could include nested multisig public keys
       * </pre>
       *
       * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
       */
      public ModeInfo getModeInfos(int index) {
        if (modeInfosBuilder_ == null) {
          return modeInfos_.get(index);
        } else {
          return modeInfosBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * mode_infos is the corresponding modes of the signers of the multisig
       * which could include nested multisig public keys
       * </pre>
       *
       * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
       */
      public Builder setModeInfos(
          int index, ModeInfo value) {
        if (modeInfosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureModeInfosIsMutable();
          modeInfos_.set(index, value);
          onChanged();
        } else {
          modeInfosBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * mode_infos is the corresponding modes of the signers of the multisig
       * which could include nested multisig public keys
       * </pre>
       *
       * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
       */
      public Builder setModeInfos(
          int index, ModeInfo.Builder builderForValue) {
        if (modeInfosBuilder_ == null) {
          ensureModeInfosIsMutable();
          modeInfos_.set(index, builderForValue.build());
          onChanged();
        } else {
          modeInfosBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * mode_infos is the corresponding modes of the signers of the multisig
       * which could include nested multisig public keys
       * </pre>
       *
       * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
       */
      public Builder addModeInfos(ModeInfo value) {
        if (modeInfosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureModeInfosIsMutable();
          modeInfos_.add(value);
          onChanged();
        } else {
          modeInfosBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * mode_infos is the corresponding modes of the signers of the multisig
       * which could include nested multisig public keys
       * </pre>
       *
       * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
       */
      public Builder addModeInfos(
          int index, ModeInfo value) {
        if (modeInfosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureModeInfosIsMutable();
          modeInfos_.add(index, value);
          onChanged();
        } else {
          modeInfosBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * mode_infos is the corresponding modes of the signers of the multisig
       * which could include nested multisig public keys
       * </pre>
       *
       * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
       */
      public Builder addModeInfos(
          ModeInfo.Builder builderForValue) {
        if (modeInfosBuilder_ == null) {
          ensureModeInfosIsMutable();
          modeInfos_.add(builderForValue.build());
          onChanged();
        } else {
          modeInfosBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * mode_infos is the corresponding modes of the signers of the multisig
       * which could include nested multisig public keys
       * </pre>
       *
       * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
       */
      public Builder addModeInfos(
          int index, ModeInfo.Builder builderForValue) {
        if (modeInfosBuilder_ == null) {
          ensureModeInfosIsMutable();
          modeInfos_.add(index, builderForValue.build());
          onChanged();
        } else {
          modeInfosBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * mode_infos is the corresponding modes of the signers of the multisig
       * which could include nested multisig public keys
       * </pre>
       *
       * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
       */
      public Builder addAllModeInfos(
          Iterable<? extends ModeInfo> values) {
        if (modeInfosBuilder_ == null) {
          ensureModeInfosIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, modeInfos_);
          onChanged();
        } else {
          modeInfosBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * mode_infos is the corresponding modes of the signers of the multisig
       * which could include nested multisig public keys
       * </pre>
       *
       * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
       */
      public Builder clearModeInfos() {
        if (modeInfosBuilder_ == null) {
          modeInfos_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          modeInfosBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * mode_infos is the corresponding modes of the signers of the multisig
       * which could include nested multisig public keys
       * </pre>
       *
       * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
       */
      public Builder removeModeInfos(int index) {
        if (modeInfosBuilder_ == null) {
          ensureModeInfosIsMutable();
          modeInfos_.remove(index);
          onChanged();
        } else {
          modeInfosBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * mode_infos is the corresponding modes of the signers of the multisig
       * which could include nested multisig public keys
       * </pre>
       *
       * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
       */
      public ModeInfo.Builder getModeInfosBuilder(
          int index) {
        return getModeInfosFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * mode_infos is the corresponding modes of the signers of the multisig
       * which could include nested multisig public keys
       * </pre>
       *
       * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
       */
      public ModeInfoOrBuilder getModeInfosOrBuilder(
          int index) {
        if (modeInfosBuilder_ == null) {
          return modeInfos_.get(index);  } else {
          return modeInfosBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * mode_infos is the corresponding modes of the signers of the multisig
       * which could include nested multisig public keys
       * </pre>
       *
       * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
       */
      public java.util.List<? extends ModeInfoOrBuilder>
           getModeInfosOrBuilderList() {
        if (modeInfosBuilder_ != null) {
          return modeInfosBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(modeInfos_);
        }
      }
      /**
       * <pre>
       * mode_infos is the corresponding modes of the signers of the multisig
       * which could include nested multisig public keys
       * </pre>
       *
       * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
       */
      public ModeInfo.Builder addModeInfosBuilder() {
        return getModeInfosFieldBuilder().addBuilder(
            ModeInfo.getDefaultInstance());
      }
      /**
       * <pre>
       * mode_infos is the corresponding modes of the signers of the multisig
       * which could include nested multisig public keys
       * </pre>
       *
       * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
       */
      public ModeInfo.Builder addModeInfosBuilder(
          int index) {
        return getModeInfosFieldBuilder().addBuilder(
            index, ModeInfo.getDefaultInstance());
      }
      /**
       * <pre>
       * mode_infos is the corresponding modes of the signers of the multisig
       * which could include nested multisig public keys
       * </pre>
       *
       * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
       */
      public java.util.List<ModeInfo.Builder>
           getModeInfosBuilderList() {
        return getModeInfosFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          ModeInfo, ModeInfo.Builder, ModeInfoOrBuilder>
          getModeInfosFieldBuilder() {
        if (modeInfosBuilder_ == null) {
          modeInfosBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              ModeInfo, ModeInfo.Builder, ModeInfoOrBuilder>(
                  modeInfos_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          modeInfos_ = null;
        }
        return modeInfosBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:cosmos.tx.v1beta1.ModeInfo.Multi)
    }

    // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.ModeInfo.Multi)
    private static final Multi DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Multi();
    }

    public static Multi getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Multi>
        PARSER = new com.google.protobuf.AbstractParser<Multi>() {
      @Override
      public Multi parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Multi> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Multi> getParserForType() {
      return PARSER;
    }

    @Override
    public Multi getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int sumCase_ = 0;
  @SuppressWarnings("serial")
  private Object sum_;
  public enum SumCase
      implements com.google.protobuf.Internal.EnumLite,
          InternalOneOfEnum {
    SINGLE(1),
    MULTI(2),
    SUM_NOT_SET(0);
    private final int value;
    private SumCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static SumCase valueOf(int value) {
      return forNumber(value);
    }

    public static SumCase forNumber(int value) {
      switch (value) {
        case 1: return SINGLE;
        case 2: return MULTI;
        case 0: return SUM_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public SumCase
  getSumCase() {
    return SumCase.forNumber(
        sumCase_);
  }

  public static final int SINGLE_FIELD_NUMBER = 1;
  /**
   * <pre>
   * single represents a single signer
   * </pre>
   *
   * <code>.cosmos.tx.v1beta1.ModeInfo.Single single = 1 [json_name = "single"];</code>
   * @return Whether the single field is set.
   */
  @Override
  public boolean hasSingle() {
    return sumCase_ == 1;
  }
  /**
   * <pre>
   * single represents a single signer
   * </pre>
   *
   * <code>.cosmos.tx.v1beta1.ModeInfo.Single single = 1 [json_name = "single"];</code>
   * @return The single.
   */
  @Override
  public Single getSingle() {
    if (sumCase_ == 1) {
       return (Single) sum_;
    }
    return Single.getDefaultInstance();
  }
  /**
   * <pre>
   * single represents a single signer
   * </pre>
   *
   * <code>.cosmos.tx.v1beta1.ModeInfo.Single single = 1 [json_name = "single"];</code>
   */
  @Override
  public SingleOrBuilder getSingleOrBuilder() {
    if (sumCase_ == 1) {
       return (Single) sum_;
    }
    return Single.getDefaultInstance();
  }

  public static final int MULTI_FIELD_NUMBER = 2;
  /**
   * <pre>
   * multi represents a nested multisig signer
   * </pre>
   *
   * <code>.cosmos.tx.v1beta1.ModeInfo.Multi multi = 2 [json_name = "multi"];</code>
   * @return Whether the multi field is set.
   */
  @Override
  public boolean hasMulti() {
    return sumCase_ == 2;
  }
  /**
   * <pre>
   * multi represents a nested multisig signer
   * </pre>
   *
   * <code>.cosmos.tx.v1beta1.ModeInfo.Multi multi = 2 [json_name = "multi"];</code>
   * @return The multi.
   */
  @Override
  public Multi getMulti() {
    if (sumCase_ == 2) {
       return (Multi) sum_;
    }
    return Multi.getDefaultInstance();
  }
  /**
   * <pre>
   * multi represents a nested multisig signer
   * </pre>
   *
   * <code>.cosmos.tx.v1beta1.ModeInfo.Multi multi = 2 [json_name = "multi"];</code>
   */
  @Override
  public MultiOrBuilder getMultiOrBuilder() {
    if (sumCase_ == 2) {
       return (Multi) sum_;
    }
    return Multi.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (sumCase_ == 1) {
      output.writeMessage(1, (Single) sum_);
    }
    if (sumCase_ == 2) {
      output.writeMessage(2, (Multi) sum_);
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (sumCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (Single) sum_);
    }
    if (sumCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (Multi) sum_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof ModeInfo)) {
      return super.equals(obj);
    }
    ModeInfo other = (ModeInfo) obj;

    if (!getSumCase().equals(other.getSumCase())) return false;
    switch (sumCase_) {
      case 1:
        if (!getSingle()
            .equals(other.getSingle())) return false;
        break;
      case 2:
        if (!getMulti()
            .equals(other.getMulti())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (sumCase_) {
      case 1:
        hash = (37 * hash) + SINGLE_FIELD_NUMBER;
        hash = (53 * hash) + getSingle().hashCode();
        break;
      case 2:
        hash = (37 * hash) + MULTI_FIELD_NUMBER;
        hash = (53 * hash) + getMulti().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static ModeInfo parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ModeInfo parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ModeInfo parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ModeInfo parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ModeInfo parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ModeInfo parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ModeInfo parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ModeInfo parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static ModeInfo parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static ModeInfo parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static ModeInfo parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ModeInfo parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(ModeInfo prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * ModeInfo describes the signing mode of a single or nested multisig signer.
   * </pre>
   *
   * Protobuf type {@code cosmos.tx.v1beta1.ModeInfo}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:cosmos.tx.v1beta1.ModeInfo)
      ModeInfoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return TxProto.internal_static_cosmos_tx_v1beta1_ModeInfo_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return TxProto.internal_static_cosmos_tx_v1beta1_ModeInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ModeInfo.class, Builder.class);
    }

    // Construct using com.cosmos.tx.v1beta1.ModeInfo.newBuilder()
    private Builder() {

    }

    private Builder(
        BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (singleBuilder_ != null) {
        singleBuilder_.clear();
      }
      if (multiBuilder_ != null) {
        multiBuilder_.clear();
      }
      sumCase_ = 0;
      sum_ = null;
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return TxProto.internal_static_cosmos_tx_v1beta1_ModeInfo_descriptor;
    }

    @Override
    public ModeInfo getDefaultInstanceForType() {
      return ModeInfo.getDefaultInstance();
    }

    @Override
    public ModeInfo build() {
      ModeInfo result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public ModeInfo buildPartial() {
      ModeInfo result = new ModeInfo(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(ModeInfo result) {
      int from_bitField0_ = bitField0_;
    }

    private void buildPartialOneofs(ModeInfo result) {
      result.sumCase_ = sumCase_;
      result.sum_ = this.sum_;
      if (sumCase_ == 1 &&
          singleBuilder_ != null) {
        result.sum_ = singleBuilder_.build();
      }
      if (sumCase_ == 2 &&
          multiBuilder_ != null) {
        result.sum_ = multiBuilder_.build();
      }
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof ModeInfo) {
        return mergeFrom((ModeInfo)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(ModeInfo other) {
      if (other == ModeInfo.getDefaultInstance()) return this;
      switch (other.getSumCase()) {
        case SINGLE: {
          mergeSingle(other.getSingle());
          break;
        }
        case MULTI: {
          mergeMulti(other.getMulti());
          break;
        }
        case SUM_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getSingleFieldBuilder().getBuilder(),
                  extensionRegistry);
              sumCase_ = 1;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getMultiFieldBuilder().getBuilder(),
                  extensionRegistry);
              sumCase_ = 2;
              break;
            } // case 18
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int sumCase_ = 0;
    private Object sum_;
    public SumCase
        getSumCase() {
      return SumCase.forNumber(
          sumCase_);
    }

    public Builder clearSum() {
      sumCase_ = 0;
      sum_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private com.google.protobuf.SingleFieldBuilderV3<
        Single, Single.Builder, SingleOrBuilder> singleBuilder_;
    /**
     * <pre>
     * single represents a single signer
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.ModeInfo.Single single = 1 [json_name = "single"];</code>
     * @return Whether the single field is set.
     */
    @Override
    public boolean hasSingle() {
      return sumCase_ == 1;
    }
    /**
     * <pre>
     * single represents a single signer
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.ModeInfo.Single single = 1 [json_name = "single"];</code>
     * @return The single.
     */
    @Override
    public Single getSingle() {
      if (singleBuilder_ == null) {
        if (sumCase_ == 1) {
          return (Single) sum_;
        }
        return Single.getDefaultInstance();
      } else {
        if (sumCase_ == 1) {
          return singleBuilder_.getMessage();
        }
        return Single.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * single represents a single signer
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.ModeInfo.Single single = 1 [json_name = "single"];</code>
     */
    public Builder setSingle(Single value) {
      if (singleBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        sum_ = value;
        onChanged();
      } else {
        singleBuilder_.setMessage(value);
      }
      sumCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * single represents a single signer
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.ModeInfo.Single single = 1 [json_name = "single"];</code>
     */
    public Builder setSingle(
        Single.Builder builderForValue) {
      if (singleBuilder_ == null) {
        sum_ = builderForValue.build();
        onChanged();
      } else {
        singleBuilder_.setMessage(builderForValue.build());
      }
      sumCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * single represents a single signer
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.ModeInfo.Single single = 1 [json_name = "single"];</code>
     */
    public Builder mergeSingle(Single value) {
      if (singleBuilder_ == null) {
        if (sumCase_ == 1 &&
            sum_ != Single.getDefaultInstance()) {
          sum_ = Single.newBuilder((Single) sum_)
              .mergeFrom(value).buildPartial();
        } else {
          sum_ = value;
        }
        onChanged();
      } else {
        if (sumCase_ == 1) {
          singleBuilder_.mergeFrom(value);
        } else {
          singleBuilder_.setMessage(value);
        }
      }
      sumCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * single represents a single signer
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.ModeInfo.Single single = 1 [json_name = "single"];</code>
     */
    public Builder clearSingle() {
      if (singleBuilder_ == null) {
        if (sumCase_ == 1) {
          sumCase_ = 0;
          sum_ = null;
          onChanged();
        }
      } else {
        if (sumCase_ == 1) {
          sumCase_ = 0;
          sum_ = null;
        }
        singleBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * single represents a single signer
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.ModeInfo.Single single = 1 [json_name = "single"];</code>
     */
    public Single.Builder getSingleBuilder() {
      return getSingleFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * single represents a single signer
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.ModeInfo.Single single = 1 [json_name = "single"];</code>
     */
    @Override
    public SingleOrBuilder getSingleOrBuilder() {
      if ((sumCase_ == 1) && (singleBuilder_ != null)) {
        return singleBuilder_.getMessageOrBuilder();
      } else {
        if (sumCase_ == 1) {
          return (Single) sum_;
        }
        return Single.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * single represents a single signer
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.ModeInfo.Single single = 1 [json_name = "single"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        Single, Single.Builder, SingleOrBuilder>
        getSingleFieldBuilder() {
      if (singleBuilder_ == null) {
        if (!(sumCase_ == 1)) {
          sum_ = Single.getDefaultInstance();
        }
        singleBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            Single, Single.Builder, SingleOrBuilder>(
                (Single) sum_,
                getParentForChildren(),
                isClean());
        sum_ = null;
      }
      sumCase_ = 1;
      onChanged();
      return singleBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        Multi, Multi.Builder, MultiOrBuilder> multiBuilder_;
    /**
     * <pre>
     * multi represents a nested multisig signer
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.ModeInfo.Multi multi = 2 [json_name = "multi"];</code>
     * @return Whether the multi field is set.
     */
    @Override
    public boolean hasMulti() {
      return sumCase_ == 2;
    }
    /**
     * <pre>
     * multi represents a nested multisig signer
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.ModeInfo.Multi multi = 2 [json_name = "multi"];</code>
     * @return The multi.
     */
    @Override
    public Multi getMulti() {
      if (multiBuilder_ == null) {
        if (sumCase_ == 2) {
          return (Multi) sum_;
        }
        return Multi.getDefaultInstance();
      } else {
        if (sumCase_ == 2) {
          return multiBuilder_.getMessage();
        }
        return Multi.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * multi represents a nested multisig signer
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.ModeInfo.Multi multi = 2 [json_name = "multi"];</code>
     */
    public Builder setMulti(Multi value) {
      if (multiBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        sum_ = value;
        onChanged();
      } else {
        multiBuilder_.setMessage(value);
      }
      sumCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * multi represents a nested multisig signer
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.ModeInfo.Multi multi = 2 [json_name = "multi"];</code>
     */
    public Builder setMulti(
        Multi.Builder builderForValue) {
      if (multiBuilder_ == null) {
        sum_ = builderForValue.build();
        onChanged();
      } else {
        multiBuilder_.setMessage(builderForValue.build());
      }
      sumCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * multi represents a nested multisig signer
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.ModeInfo.Multi multi = 2 [json_name = "multi"];</code>
     */
    public Builder mergeMulti(Multi value) {
      if (multiBuilder_ == null) {
        if (sumCase_ == 2 &&
            sum_ != Multi.getDefaultInstance()) {
          sum_ = Multi.newBuilder((Multi) sum_)
              .mergeFrom(value).buildPartial();
        } else {
          sum_ = value;
        }
        onChanged();
      } else {
        if (sumCase_ == 2) {
          multiBuilder_.mergeFrom(value);
        } else {
          multiBuilder_.setMessage(value);
        }
      }
      sumCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * multi represents a nested multisig signer
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.ModeInfo.Multi multi = 2 [json_name = "multi"];</code>
     */
    public Builder clearMulti() {
      if (multiBuilder_ == null) {
        if (sumCase_ == 2) {
          sumCase_ = 0;
          sum_ = null;
          onChanged();
        }
      } else {
        if (sumCase_ == 2) {
          sumCase_ = 0;
          sum_ = null;
        }
        multiBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * multi represents a nested multisig signer
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.ModeInfo.Multi multi = 2 [json_name = "multi"];</code>
     */
    public Multi.Builder getMultiBuilder() {
      return getMultiFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * multi represents a nested multisig signer
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.ModeInfo.Multi multi = 2 [json_name = "multi"];</code>
     */
    @Override
    public MultiOrBuilder getMultiOrBuilder() {
      if ((sumCase_ == 2) && (multiBuilder_ != null)) {
        return multiBuilder_.getMessageOrBuilder();
      } else {
        if (sumCase_ == 2) {
          return (Multi) sum_;
        }
        return Multi.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * multi represents a nested multisig signer
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.ModeInfo.Multi multi = 2 [json_name = "multi"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        Multi, Multi.Builder, MultiOrBuilder>
        getMultiFieldBuilder() {
      if (multiBuilder_ == null) {
        if (!(sumCase_ == 2)) {
          sum_ = Multi.getDefaultInstance();
        }
        multiBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            Multi, Multi.Builder, MultiOrBuilder>(
                (Multi) sum_,
                getParentForChildren(),
                isClean());
        sum_ = null;
      }
      sumCase_ = 2;
      onChanged();
      return multiBuilder_;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:cosmos.tx.v1beta1.ModeInfo)
  }

  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.ModeInfo)
  private static final ModeInfo DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ModeInfo();
  }

  public static ModeInfo getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ModeInfo>
      PARSER = new com.google.protobuf.AbstractParser<ModeInfo>() {
    @Override
    public ModeInfo parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<ModeInfo> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<ModeInfo> getParserForType() {
    return PARSER;
  }

  @Override
  public ModeInfo getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

