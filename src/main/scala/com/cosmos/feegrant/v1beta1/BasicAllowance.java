// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/feegrant/v1beta1/feegrant.proto

package com.cosmos.feegrant.v1beta1;

/**
 * <pre>
 * BasicAllowance implements Allowance with a one-time grant of tokens
 * that optionally expires. The grantee can use up to SpendLimit to cover fees.
 * </pre>
 *
 * Protobuf type {@code cosmos.feegrant.v1beta1.BasicAllowance}
 */
public final class BasicAllowance extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:cosmos.feegrant.v1beta1.BasicAllowance)
    BasicAllowanceOrBuilder {
private static final long serialVersionUID = 0L;
  // Use BasicAllowance.newBuilder() to construct.
  private BasicAllowance(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private BasicAllowance() {
    spendLimit_ = java.util.Collections.emptyList();
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new BasicAllowance();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return FeegrantProto.internal_static_cosmos_feegrant_v1beta1_BasicAllowance_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return FeegrantProto.internal_static_cosmos_feegrant_v1beta1_BasicAllowance_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            BasicAllowance.class, Builder.class);
  }

  public static final int SPEND_LIMIT_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private java.util.List<com.cosmos.base.v1beta1.Coin> spendLimit_;
  /**
   * <pre>
   * spend_limit specifies the maximum amount of tokens that can be spent
   * by this allowance and will be updated as tokens are spent. If it is
   * empty, there is no spend limit and any amount of coins can be spent.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @Override
  public java.util.List<com.cosmos.base.v1beta1.Coin> getSpendLimitList() {
    return spendLimit_;
  }
  /**
   * <pre>
   * spend_limit specifies the maximum amount of tokens that can be spent
   * by this allowance and will be updated as tokens are spent. If it is
   * empty, there is no spend limit and any amount of coins can be spent.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @Override
  public java.util.List<? extends com.cosmos.base.v1beta1.CoinOrBuilder> 
      getSpendLimitOrBuilderList() {
    return spendLimit_;
  }
  /**
   * <pre>
   * spend_limit specifies the maximum amount of tokens that can be spent
   * by this allowance and will be updated as tokens are spent. If it is
   * empty, there is no spend limit and any amount of coins can be spent.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @Override
  public int getSpendLimitCount() {
    return spendLimit_.size();
  }
  /**
   * <pre>
   * spend_limit specifies the maximum amount of tokens that can be spent
   * by this allowance and will be updated as tokens are spent. If it is
   * empty, there is no spend limit and any amount of coins can be spent.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @Override
  public com.cosmos.base.v1beta1.Coin getSpendLimit(int index) {
    return spendLimit_.get(index);
  }
  /**
   * <pre>
   * spend_limit specifies the maximum amount of tokens that can be spent
   * by this allowance and will be updated as tokens are spent. If it is
   * empty, there is no spend limit and any amount of coins can be spent.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @Override
  public com.cosmos.base.v1beta1.CoinOrBuilder getSpendLimitOrBuilder(
      int index) {
    return spendLimit_.get(index);
  }

  public static final int EXPIRATION_FIELD_NUMBER = 2;
  private com.google.protobuf.Timestamp expiration_;
  /**
   * <pre>
   * expiration specifies an optional time when this allowance expires
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];</code>
   * @return Whether the expiration field is set.
   */
  @Override
  public boolean hasExpiration() {
    return expiration_ != null;
  }
  /**
   * <pre>
   * expiration specifies an optional time when this allowance expires
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];</code>
   * @return The expiration.
   */
  @Override
  public com.google.protobuf.Timestamp getExpiration() {
    return expiration_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : expiration_;
  }
  /**
   * <pre>
   * expiration specifies an optional time when this allowance expires
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];</code>
   */
  @Override
  public com.google.protobuf.TimestampOrBuilder getExpirationOrBuilder() {
    return expiration_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : expiration_;
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < spendLimit_.size(); i++) {
      output.writeMessage(1, spendLimit_.get(i));
    }
    if (expiration_ != null) {
      output.writeMessage(2, getExpiration());
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < spendLimit_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, spendLimit_.get(i));
    }
    if (expiration_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getExpiration());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof BasicAllowance)) {
      return super.equals(obj);
    }
    BasicAllowance other = (BasicAllowance) obj;

    if (!getSpendLimitList()
        .equals(other.getSpendLimitList())) return false;
    if (hasExpiration() != other.hasExpiration()) return false;
    if (hasExpiration()) {
      if (!getExpiration()
          .equals(other.getExpiration())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getSpendLimitCount() > 0) {
      hash = (37 * hash) + SPEND_LIMIT_FIELD_NUMBER;
      hash = (53 * hash) + getSpendLimitList().hashCode();
    }
    if (hasExpiration()) {
      hash = (37 * hash) + EXPIRATION_FIELD_NUMBER;
      hash = (53 * hash) + getExpiration().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static BasicAllowance parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static BasicAllowance parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static BasicAllowance parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static BasicAllowance parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static BasicAllowance parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static BasicAllowance parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static BasicAllowance parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static BasicAllowance parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static BasicAllowance parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static BasicAllowance parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static BasicAllowance parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static BasicAllowance parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(BasicAllowance prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * BasicAllowance implements Allowance with a one-time grant of tokens
   * that optionally expires. The grantee can use up to SpendLimit to cover fees.
   * </pre>
   *
   * Protobuf type {@code cosmos.feegrant.v1beta1.BasicAllowance}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:cosmos.feegrant.v1beta1.BasicAllowance)
      BasicAllowanceOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return FeegrantProto.internal_static_cosmos_feegrant_v1beta1_BasicAllowance_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return FeegrantProto.internal_static_cosmos_feegrant_v1beta1_BasicAllowance_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              BasicAllowance.class, Builder.class);
    }

    // Construct using com.cosmos.feegrant.v1beta1.BasicAllowance.newBuilder()
    private Builder() {

    }

    private Builder(
        BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (spendLimitBuilder_ == null) {
        spendLimit_ = java.util.Collections.emptyList();
      } else {
        spendLimit_ = null;
        spendLimitBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      expiration_ = null;
      if (expirationBuilder_ != null) {
        expirationBuilder_.dispose();
        expirationBuilder_ = null;
      }
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return FeegrantProto.internal_static_cosmos_feegrant_v1beta1_BasicAllowance_descriptor;
    }

    @Override
    public BasicAllowance getDefaultInstanceForType() {
      return BasicAllowance.getDefaultInstance();
    }

    @Override
    public BasicAllowance build() {
      BasicAllowance result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public BasicAllowance buildPartial() {
      BasicAllowance result = new BasicAllowance(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(BasicAllowance result) {
      if (spendLimitBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          spendLimit_ = java.util.Collections.unmodifiableList(spendLimit_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.spendLimit_ = spendLimit_;
      } else {
        result.spendLimit_ = spendLimitBuilder_.build();
      }
    }

    private void buildPartial0(BasicAllowance result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.expiration_ = expirationBuilder_ == null
            ? expiration_
            : expirationBuilder_.build();
      }
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof BasicAllowance) {
        return mergeFrom((BasicAllowance)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(BasicAllowance other) {
      if (other == BasicAllowance.getDefaultInstance()) return this;
      if (spendLimitBuilder_ == null) {
        if (!other.spendLimit_.isEmpty()) {
          if (spendLimit_.isEmpty()) {
            spendLimit_ = other.spendLimit_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureSpendLimitIsMutable();
            spendLimit_.addAll(other.spendLimit_);
          }
          onChanged();
        }
      } else {
        if (!other.spendLimit_.isEmpty()) {
          if (spendLimitBuilder_.isEmpty()) {
            spendLimitBuilder_.dispose();
            spendLimitBuilder_ = null;
            spendLimit_ = other.spendLimit_;
            bitField0_ = (bitField0_ & ~0x00000001);
            spendLimitBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSpendLimitFieldBuilder() : null;
          } else {
            spendLimitBuilder_.addAllMessages(other.spendLimit_);
          }
        }
      }
      if (other.hasExpiration()) {
        mergeExpiration(other.getExpiration());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.cosmos.base.v1beta1.Coin m =
                  input.readMessage(
                      com.cosmos.base.v1beta1.Coin.parser(),
                      extensionRegistry);
              if (spendLimitBuilder_ == null) {
                ensureSpendLimitIsMutable();
                spendLimit_.add(m);
              } else {
                spendLimitBuilder_.addMessage(m);
              }
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getExpirationFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.util.List<com.cosmos.base.v1beta1.Coin> spendLimit_ =
      java.util.Collections.emptyList();
    private void ensureSpendLimitIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        spendLimit_ = new java.util.ArrayList<com.cosmos.base.v1beta1.Coin>(spendLimit_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder> spendLimitBuilder_;

    /**
     * <pre>
     * spend_limit specifies the maximum amount of tokens that can be spent
     * by this allowance and will be updated as tokens are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<com.cosmos.base.v1beta1.Coin> getSpendLimitList() {
      if (spendLimitBuilder_ == null) {
        return java.util.Collections.unmodifiableList(spendLimit_);
      } else {
        return spendLimitBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * spend_limit specifies the maximum amount of tokens that can be spent
     * by this allowance and will be updated as tokens are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public int getSpendLimitCount() {
      if (spendLimitBuilder_ == null) {
        return spendLimit_.size();
      } else {
        return spendLimitBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * spend_limit specifies the maximum amount of tokens that can be spent
     * by this allowance and will be updated as tokens are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin getSpendLimit(int index) {
      if (spendLimitBuilder_ == null) {
        return spendLimit_.get(index);
      } else {
        return spendLimitBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * spend_limit specifies the maximum amount of tokens that can be spent
     * by this allowance and will be updated as tokens are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder setSpendLimit(
        int index, com.cosmos.base.v1beta1.Coin value) {
      if (spendLimitBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSpendLimitIsMutable();
        spendLimit_.set(index, value);
        onChanged();
      } else {
        spendLimitBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * spend_limit specifies the maximum amount of tokens that can be spent
     * by this allowance and will be updated as tokens are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder setSpendLimit(
        int index, com.cosmos.base.v1beta1.Coin.Builder builderForValue) {
      if (spendLimitBuilder_ == null) {
        ensureSpendLimitIsMutable();
        spendLimit_.set(index, builderForValue.build());
        onChanged();
      } else {
        spendLimitBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * spend_limit specifies the maximum amount of tokens that can be spent
     * by this allowance and will be updated as tokens are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addSpendLimit(com.cosmos.base.v1beta1.Coin value) {
      if (spendLimitBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSpendLimitIsMutable();
        spendLimit_.add(value);
        onChanged();
      } else {
        spendLimitBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * spend_limit specifies the maximum amount of tokens that can be spent
     * by this allowance and will be updated as tokens are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addSpendLimit(
        int index, com.cosmos.base.v1beta1.Coin value) {
      if (spendLimitBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSpendLimitIsMutable();
        spendLimit_.add(index, value);
        onChanged();
      } else {
        spendLimitBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * spend_limit specifies the maximum amount of tokens that can be spent
     * by this allowance and will be updated as tokens are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addSpendLimit(
        com.cosmos.base.v1beta1.Coin.Builder builderForValue) {
      if (spendLimitBuilder_ == null) {
        ensureSpendLimitIsMutable();
        spendLimit_.add(builderForValue.build());
        onChanged();
      } else {
        spendLimitBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * spend_limit specifies the maximum amount of tokens that can be spent
     * by this allowance and will be updated as tokens are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addSpendLimit(
        int index, com.cosmos.base.v1beta1.Coin.Builder builderForValue) {
      if (spendLimitBuilder_ == null) {
        ensureSpendLimitIsMutable();
        spendLimit_.add(index, builderForValue.build());
        onChanged();
      } else {
        spendLimitBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * spend_limit specifies the maximum amount of tokens that can be spent
     * by this allowance and will be updated as tokens are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addAllSpendLimit(
        Iterable<? extends com.cosmos.base.v1beta1.Coin> values) {
      if (spendLimitBuilder_ == null) {
        ensureSpendLimitIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, spendLimit_);
        onChanged();
      } else {
        spendLimitBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * spend_limit specifies the maximum amount of tokens that can be spent
     * by this allowance and will be updated as tokens are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder clearSpendLimit() {
      if (spendLimitBuilder_ == null) {
        spendLimit_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        spendLimitBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * spend_limit specifies the maximum amount of tokens that can be spent
     * by this allowance and will be updated as tokens are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder removeSpendLimit(int index) {
      if (spendLimitBuilder_ == null) {
        ensureSpendLimitIsMutable();
        spendLimit_.remove(index);
        onChanged();
      } else {
        spendLimitBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * spend_limit specifies the maximum amount of tokens that can be spent
     * by this allowance and will be updated as tokens are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin.Builder getSpendLimitBuilder(
        int index) {
      return getSpendLimitFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * spend_limit specifies the maximum amount of tokens that can be spent
     * by this allowance and will be updated as tokens are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.CoinOrBuilder getSpendLimitOrBuilder(
        int index) {
      if (spendLimitBuilder_ == null) {
        return spendLimit_.get(index);  } else {
        return spendLimitBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * spend_limit specifies the maximum amount of tokens that can be spent
     * by this allowance and will be updated as tokens are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<? extends com.cosmos.base.v1beta1.CoinOrBuilder> 
         getSpendLimitOrBuilderList() {
      if (spendLimitBuilder_ != null) {
        return spendLimitBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(spendLimit_);
      }
    }
    /**
     * <pre>
     * spend_limit specifies the maximum amount of tokens that can be spent
     * by this allowance and will be updated as tokens are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin.Builder addSpendLimitBuilder() {
      return getSpendLimitFieldBuilder().addBuilder(
          com.cosmos.base.v1beta1.Coin.getDefaultInstance());
    }
    /**
     * <pre>
     * spend_limit specifies the maximum amount of tokens that can be spent
     * by this allowance and will be updated as tokens are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin.Builder addSpendLimitBuilder(
        int index) {
      return getSpendLimitFieldBuilder().addBuilder(
          index, com.cosmos.base.v1beta1.Coin.getDefaultInstance());
    }
    /**
     * <pre>
     * spend_limit specifies the maximum amount of tokens that can be spent
     * by this allowance and will be updated as tokens are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<com.cosmos.base.v1beta1.Coin.Builder> 
         getSpendLimitBuilderList() {
      return getSpendLimitFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder> 
        getSpendLimitFieldBuilder() {
      if (spendLimitBuilder_ == null) {
        spendLimitBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder>(
                spendLimit_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        spendLimit_ = null;
      }
      return spendLimitBuilder_;
    }

    private com.google.protobuf.Timestamp expiration_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> expirationBuilder_;
    /**
     * <pre>
     * expiration specifies an optional time when this allowance expires
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];</code>
     * @return Whether the expiration field is set.
     */
    public boolean hasExpiration() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * expiration specifies an optional time when this allowance expires
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];</code>
     * @return The expiration.
     */
    public com.google.protobuf.Timestamp getExpiration() {
      if (expirationBuilder_ == null) {
        return expiration_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : expiration_;
      } else {
        return expirationBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * expiration specifies an optional time when this allowance expires
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];</code>
     */
    public Builder setExpiration(com.google.protobuf.Timestamp value) {
      if (expirationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        expiration_ = value;
      } else {
        expirationBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * expiration specifies an optional time when this allowance expires
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];</code>
     */
    public Builder setExpiration(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (expirationBuilder_ == null) {
        expiration_ = builderForValue.build();
      } else {
        expirationBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * expiration specifies an optional time when this allowance expires
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];</code>
     */
    public Builder mergeExpiration(com.google.protobuf.Timestamp value) {
      if (expirationBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          expiration_ != null &&
          expiration_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
          getExpirationBuilder().mergeFrom(value);
        } else {
          expiration_ = value;
        }
      } else {
        expirationBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * expiration specifies an optional time when this allowance expires
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];</code>
     */
    public Builder clearExpiration() {
      bitField0_ = (bitField0_ & ~0x00000002);
      expiration_ = null;
      if (expirationBuilder_ != null) {
        expirationBuilder_.dispose();
        expirationBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * expiration specifies an optional time when this allowance expires
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];</code>
     */
    public com.google.protobuf.Timestamp.Builder getExpirationBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getExpirationFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * expiration specifies an optional time when this allowance expires
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];</code>
     */
    public com.google.protobuf.TimestampOrBuilder getExpirationOrBuilder() {
      if (expirationBuilder_ != null) {
        return expirationBuilder_.getMessageOrBuilder();
      } else {
        return expiration_ == null ?
            com.google.protobuf.Timestamp.getDefaultInstance() : expiration_;
      }
    }
    /**
     * <pre>
     * expiration specifies an optional time when this allowance expires
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getExpirationFieldBuilder() {
      if (expirationBuilder_ == null) {
        expirationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                getExpiration(),
                getParentForChildren(),
                isClean());
        expiration_ = null;
      }
      return expirationBuilder_;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:cosmos.feegrant.v1beta1.BasicAllowance)
  }

  // @@protoc_insertion_point(class_scope:cosmos.feegrant.v1beta1.BasicAllowance)
  private static final BasicAllowance DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new BasicAllowance();
  }

  public static BasicAllowance getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<BasicAllowance>
      PARSER = new com.google.protobuf.AbstractParser<BasicAllowance>() {
    @Override
    public BasicAllowance parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<BasicAllowance> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<BasicAllowance> getParserForType() {
    return PARSER;
  }

  @Override
  public BasicAllowance getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

