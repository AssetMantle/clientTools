// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/staking/v1beta1/authz.proto

package com.cosmos.staking.v1beta1;

/**
 * <pre>
 * StakeAuthorization defines authorization for delegate/undelegate/redelegate.
 *
 * Since: cosmos-sdk 0.43
 * </pre>
 *
 * Protobuf type {@code cosmos.staking.v1beta1.StakeAuthorization}
 */
public final class StakeAuthorization extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:cosmos.staking.v1beta1.StakeAuthorization)
    StakeAuthorizationOrBuilder {
private static final long serialVersionUID = 0L;
  // Use StakeAuthorization.newBuilder() to construct.
  private StakeAuthorization(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private StakeAuthorization() {
    authorizationType_ = 0;
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new StakeAuthorization();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return AuthzProto.internal_static_cosmos_staking_v1beta1_StakeAuthorization_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return AuthzProto.internal_static_cosmos_staking_v1beta1_StakeAuthorization_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            StakeAuthorization.class, Builder.class);
  }

  public interface ValidatorsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cosmos.staking.v1beta1.StakeAuthorization.Validators)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated string address = 1 [json_name = "address"];</code>
     * @return A list containing the address.
     */
    java.util.List<String>
        getAddressList();
    /**
     * <code>repeated string address = 1 [json_name = "address"];</code>
     * @return The count of address.
     */
    int getAddressCount();
    /**
     * <code>repeated string address = 1 [json_name = "address"];</code>
     * @param index The index of the element to return.
     * @return The address at the given index.
     */
    String getAddress(int index);
    /**
     * <code>repeated string address = 1 [json_name = "address"];</code>
     * @param index The index of the value to return.
     * @return The bytes of the address at the given index.
     */
    com.google.protobuf.ByteString
        getAddressBytes(int index);
  }
  /**
   * <pre>
   * Validators defines list of validator addresses.
   * </pre>
   *
   * Protobuf type {@code cosmos.staking.v1beta1.StakeAuthorization.Validators}
   */
  public static final class Validators extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:cosmos.staking.v1beta1.StakeAuthorization.Validators)
      ValidatorsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Validators.newBuilder() to construct.
    private Validators(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Validators() {
      address_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new Validators();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return AuthzProto.internal_static_cosmos_staking_v1beta1_StakeAuthorization_Validators_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return AuthzProto.internal_static_cosmos_staking_v1beta1_StakeAuthorization_Validators_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Validators.class, Builder.class);
    }

    public static final int ADDRESS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringList address_;
    /**
     * <code>repeated string address = 1 [json_name = "address"];</code>
     * @return A list containing the address.
     */
    public com.google.protobuf.ProtocolStringList
        getAddressList() {
      return address_;
    }
    /**
     * <code>repeated string address = 1 [json_name = "address"];</code>
     * @return The count of address.
     */
    public int getAddressCount() {
      return address_.size();
    }
    /**
     * <code>repeated string address = 1 [json_name = "address"];</code>
     * @param index The index of the element to return.
     * @return The address at the given index.
     */
    public String getAddress(int index) {
      return address_.get(index);
    }
    /**
     * <code>repeated string address = 1 [json_name = "address"];</code>
     * @param index The index of the value to return.
     * @return The bytes of the address at the given index.
     */
    public com.google.protobuf.ByteString
        getAddressBytes(int index) {
      return address_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < address_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, address_.getRaw(i));
      }
      getUnknownFields().writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < address_.size(); i++) {
          dataSize += computeStringSizeNoTag(address_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getAddressList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Validators)) {
        return super.equals(obj);
      }
      Validators other = (Validators) obj;

      if (!getAddressList()
          .equals(other.getAddressList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getAddressCount() > 0) {
        hash = (37 * hash) + ADDRESS_FIELD_NUMBER;
        hash = (53 * hash) + getAddressList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Validators parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Validators parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Validators parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Validators parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Validators parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Validators parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Validators parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Validators parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Validators parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Validators parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Validators parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Validators parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Validators prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Validators defines list of validator addresses.
     * </pre>
     *
     * Protobuf type {@code cosmos.staking.v1beta1.StakeAuthorization.Validators}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cosmos.staking.v1beta1.StakeAuthorization.Validators)
        ValidatorsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return AuthzProto.internal_static_cosmos_staking_v1beta1_StakeAuthorization_Validators_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return AuthzProto.internal_static_cosmos_staking_v1beta1_StakeAuthorization_Validators_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Validators.class, Builder.class);
      }

      // Construct using com.cosmos.staking.v1beta1.StakeAuthorization.Validators.newBuilder()
      private Builder() {

      }

      private Builder(
          BuilderParent parent) {
        super(parent);

      }
      @Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        address_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return AuthzProto.internal_static_cosmos_staking_v1beta1_StakeAuthorization_Validators_descriptor;
      }

      @Override
      public Validators getDefaultInstanceForType() {
        return Validators.getDefaultInstance();
      }

      @Override
      public Validators build() {
        Validators result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Validators buildPartial() {
        Validators result = new Validators(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(Validators result) {
        if (((bitField0_ & 0x00000001) != 0)) {
          address_ = address_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.address_ = address_;
      }

      private void buildPartial0(Validators result) {
        int from_bitField0_ = bitField0_;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Validators) {
          return mergeFrom((Validators)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Validators other) {
        if (other == Validators.getDefaultInstance()) return this;
        if (!other.address_.isEmpty()) {
          if (address_.isEmpty()) {
            address_ = other.address_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureAddressIsMutable();
            address_.addAll(other.address_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                String s = input.readStringRequireUtf8();
                ensureAddressIsMutable();
                address_.add(s);
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.LazyStringList address_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureAddressIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          address_ = new com.google.protobuf.LazyStringArrayList(address_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated string address = 1 [json_name = "address"];</code>
       * @return A list containing the address.
       */
      public com.google.protobuf.ProtocolStringList
          getAddressList() {
        return address_.getUnmodifiableView();
      }
      /**
       * <code>repeated string address = 1 [json_name = "address"];</code>
       * @return The count of address.
       */
      public int getAddressCount() {
        return address_.size();
      }
      /**
       * <code>repeated string address = 1 [json_name = "address"];</code>
       * @param index The index of the element to return.
       * @return The address at the given index.
       */
      public String getAddress(int index) {
        return address_.get(index);
      }
      /**
       * <code>repeated string address = 1 [json_name = "address"];</code>
       * @param index The index of the value to return.
       * @return The bytes of the address at the given index.
       */
      public com.google.protobuf.ByteString
          getAddressBytes(int index) {
        return address_.getByteString(index);
      }
      /**
       * <code>repeated string address = 1 [json_name = "address"];</code>
       * @param index The index to set the value at.
       * @param value The address to set.
       * @return This builder for chaining.
       */
      public Builder setAddress(
          int index, String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureAddressIsMutable();
        address_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string address = 1 [json_name = "address"];</code>
       * @param value The address to add.
       * @return This builder for chaining.
       */
      public Builder addAddress(
          String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureAddressIsMutable();
        address_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string address = 1 [json_name = "address"];</code>
       * @param values The address to add.
       * @return This builder for chaining.
       */
      public Builder addAllAddress(
          Iterable<String> values) {
        ensureAddressIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, address_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string address = 1 [json_name = "address"];</code>
       * @return This builder for chaining.
       */
      public Builder clearAddress() {
        address_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string address = 1 [json_name = "address"];</code>
       * @param value The bytes of the address to add.
       * @return This builder for chaining.
       */
      public Builder addAddressBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        ensureAddressIsMutable();
        address_.add(value);
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:cosmos.staking.v1beta1.StakeAuthorization.Validators)
    }

    // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.StakeAuthorization.Validators)
    private static final Validators DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Validators();
    }

    public static Validators getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Validators>
        PARSER = new com.google.protobuf.AbstractParser<Validators>() {
      @Override
      public Validators parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Validators> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Validators> getParserForType() {
      return PARSER;
    }

    @Override
    public Validators getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int validatorsCase_ = 0;
  @SuppressWarnings("serial")
  private Object validators_;
  public enum ValidatorsCase
      implements com.google.protobuf.Internal.EnumLite,
          InternalOneOfEnum {
    ALLOW_LIST(2),
    DENY_LIST(3),
    VALIDATORS_NOT_SET(0);
    private final int value;
    private ValidatorsCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static ValidatorsCase valueOf(int value) {
      return forNumber(value);
    }

    public static ValidatorsCase forNumber(int value) {
      switch (value) {
        case 2: return ALLOW_LIST;
        case 3: return DENY_LIST;
        case 0: return VALIDATORS_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ValidatorsCase
  getValidatorsCase() {
    return ValidatorsCase.forNumber(
        validatorsCase_);
  }

  public static final int MAX_TOKENS_FIELD_NUMBER = 1;
  private com.cosmos.base.v1beta1.Coin maxTokens_;
  /**
   * <pre>
   * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
   * empty, there is no spend limit and any amount of coins can be delegated.
   * </pre>
   *
   * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
   * @return Whether the maxTokens field is set.
   */
  @Override
  public boolean hasMaxTokens() {
    return maxTokens_ != null;
  }
  /**
   * <pre>
   * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
   * empty, there is no spend limit and any amount of coins can be delegated.
   * </pre>
   *
   * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
   * @return The maxTokens.
   */
  @Override
  public com.cosmos.base.v1beta1.Coin getMaxTokens() {
    return maxTokens_ == null ? com.cosmos.base.v1beta1.Coin.getDefaultInstance() : maxTokens_;
  }
  /**
   * <pre>
   * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
   * empty, there is no spend limit and any amount of coins can be delegated.
   * </pre>
   *
   * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
   */
  @Override
  public com.cosmos.base.v1beta1.CoinOrBuilder getMaxTokensOrBuilder() {
    return maxTokens_ == null ? com.cosmos.base.v1beta1.Coin.getDefaultInstance() : maxTokens_;
  }

  public static final int ALLOW_LIST_FIELD_NUMBER = 2;
  /**
   * <pre>
   * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
   * account.
   * </pre>
   *
   * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2 [json_name = "allowList"];</code>
   * @return Whether the allowList field is set.
   */
  @Override
  public boolean hasAllowList() {
    return validatorsCase_ == 2;
  }
  /**
   * <pre>
   * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
   * account.
   * </pre>
   *
   * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2 [json_name = "allowList"];</code>
   * @return The allowList.
   */
  @Override
  public Validators getAllowList() {
    if (validatorsCase_ == 2) {
       return (Validators) validators_;
    }
    return Validators.getDefaultInstance();
  }
  /**
   * <pre>
   * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
   * account.
   * </pre>
   *
   * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2 [json_name = "allowList"];</code>
   */
  @Override
  public ValidatorsOrBuilder getAllowListOrBuilder() {
    if (validatorsCase_ == 2) {
       return (Validators) validators_;
    }
    return Validators.getDefaultInstance();
  }

  public static final int DENY_LIST_FIELD_NUMBER = 3;
  /**
   * <pre>
   * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
   * </pre>
   *
   * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3 [json_name = "denyList"];</code>
   * @return Whether the denyList field is set.
   */
  @Override
  public boolean hasDenyList() {
    return validatorsCase_ == 3;
  }
  /**
   * <pre>
   * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
   * </pre>
   *
   * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3 [json_name = "denyList"];</code>
   * @return The denyList.
   */
  @Override
  public Validators getDenyList() {
    if (validatorsCase_ == 3) {
       return (Validators) validators_;
    }
    return Validators.getDefaultInstance();
  }
  /**
   * <pre>
   * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
   * </pre>
   *
   * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3 [json_name = "denyList"];</code>
   */
  @Override
  public ValidatorsOrBuilder getDenyListOrBuilder() {
    if (validatorsCase_ == 3) {
       return (Validators) validators_;
    }
    return Validators.getDefaultInstance();
  }

  public static final int AUTHORIZATION_TYPE_FIELD_NUMBER = 4;
  private int authorizationType_ = 0;
  /**
   * <pre>
   * authorization_type defines one of AuthorizationType.
   * </pre>
   *
   * <code>.cosmos.staking.v1beta1.AuthorizationType authorization_type = 4 [json_name = "authorizationType"];</code>
   * @return The enum numeric value on the wire for authorizationType.
   */
  @Override public int getAuthorizationTypeValue() {
    return authorizationType_;
  }
  /**
   * <pre>
   * authorization_type defines one of AuthorizationType.
   * </pre>
   *
   * <code>.cosmos.staking.v1beta1.AuthorizationType authorization_type = 4 [json_name = "authorizationType"];</code>
   * @return The authorizationType.
   */
  @Override public AuthorizationType getAuthorizationType() {
    AuthorizationType result = AuthorizationType.forNumber(authorizationType_);
    return result == null ? AuthorizationType.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (maxTokens_ != null) {
      output.writeMessage(1, getMaxTokens());
    }
    if (validatorsCase_ == 2) {
      output.writeMessage(2, (Validators) validators_);
    }
    if (validatorsCase_ == 3) {
      output.writeMessage(3, (Validators) validators_);
    }
    if (authorizationType_ != AuthorizationType.AUTHORIZATION_TYPE_UNSPECIFIED.getNumber()) {
      output.writeEnum(4, authorizationType_);
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (maxTokens_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getMaxTokens());
    }
    if (validatorsCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (Validators) validators_);
    }
    if (validatorsCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (Validators) validators_);
    }
    if (authorizationType_ != AuthorizationType.AUTHORIZATION_TYPE_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(4, authorizationType_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof StakeAuthorization)) {
      return super.equals(obj);
    }
    StakeAuthorization other = (StakeAuthorization) obj;

    if (hasMaxTokens() != other.hasMaxTokens()) return false;
    if (hasMaxTokens()) {
      if (!getMaxTokens()
          .equals(other.getMaxTokens())) return false;
    }
    if (authorizationType_ != other.authorizationType_) return false;
    if (!getValidatorsCase().equals(other.getValidatorsCase())) return false;
    switch (validatorsCase_) {
      case 2:
        if (!getAllowList()
            .equals(other.getAllowList())) return false;
        break;
      case 3:
        if (!getDenyList()
            .equals(other.getDenyList())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasMaxTokens()) {
      hash = (37 * hash) + MAX_TOKENS_FIELD_NUMBER;
      hash = (53 * hash) + getMaxTokens().hashCode();
    }
    hash = (37 * hash) + AUTHORIZATION_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + authorizationType_;
    switch (validatorsCase_) {
      case 2:
        hash = (37 * hash) + ALLOW_LIST_FIELD_NUMBER;
        hash = (53 * hash) + getAllowList().hashCode();
        break;
      case 3:
        hash = (37 * hash) + DENY_LIST_FIELD_NUMBER;
        hash = (53 * hash) + getDenyList().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static StakeAuthorization parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static StakeAuthorization parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static StakeAuthorization parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static StakeAuthorization parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static StakeAuthorization parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static StakeAuthorization parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static StakeAuthorization parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static StakeAuthorization parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static StakeAuthorization parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static StakeAuthorization parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static StakeAuthorization parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static StakeAuthorization parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(StakeAuthorization prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * StakeAuthorization defines authorization for delegate/undelegate/redelegate.
   *
   * Since: cosmos-sdk 0.43
   * </pre>
   *
   * Protobuf type {@code cosmos.staking.v1beta1.StakeAuthorization}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:cosmos.staking.v1beta1.StakeAuthorization)
      StakeAuthorizationOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return AuthzProto.internal_static_cosmos_staking_v1beta1_StakeAuthorization_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return AuthzProto.internal_static_cosmos_staking_v1beta1_StakeAuthorization_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              StakeAuthorization.class, Builder.class);
    }

    // Construct using com.cosmos.staking.v1beta1.StakeAuthorization.newBuilder()
    private Builder() {

    }

    private Builder(
        BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      maxTokens_ = null;
      if (maxTokensBuilder_ != null) {
        maxTokensBuilder_.dispose();
        maxTokensBuilder_ = null;
      }
      if (allowListBuilder_ != null) {
        allowListBuilder_.clear();
      }
      if (denyListBuilder_ != null) {
        denyListBuilder_.clear();
      }
      authorizationType_ = 0;
      validatorsCase_ = 0;
      validators_ = null;
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return AuthzProto.internal_static_cosmos_staking_v1beta1_StakeAuthorization_descriptor;
    }

    @Override
    public StakeAuthorization getDefaultInstanceForType() {
      return StakeAuthorization.getDefaultInstance();
    }

    @Override
    public StakeAuthorization build() {
      StakeAuthorization result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public StakeAuthorization buildPartial() {
      StakeAuthorization result = new StakeAuthorization(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(StakeAuthorization result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.maxTokens_ = maxTokensBuilder_ == null
            ? maxTokens_
            : maxTokensBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.authorizationType_ = authorizationType_;
      }
    }

    private void buildPartialOneofs(StakeAuthorization result) {
      result.validatorsCase_ = validatorsCase_;
      result.validators_ = this.validators_;
      if (validatorsCase_ == 2 &&
          allowListBuilder_ != null) {
        result.validators_ = allowListBuilder_.build();
      }
      if (validatorsCase_ == 3 &&
          denyListBuilder_ != null) {
        result.validators_ = denyListBuilder_.build();
      }
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof StakeAuthorization) {
        return mergeFrom((StakeAuthorization)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(StakeAuthorization other) {
      if (other == StakeAuthorization.getDefaultInstance()) return this;
      if (other.hasMaxTokens()) {
        mergeMaxTokens(other.getMaxTokens());
      }
      if (other.authorizationType_ != 0) {
        setAuthorizationTypeValue(other.getAuthorizationTypeValue());
      }
      switch (other.getValidatorsCase()) {
        case ALLOW_LIST: {
          mergeAllowList(other.getAllowList());
          break;
        }
        case DENY_LIST: {
          mergeDenyList(other.getDenyList());
          break;
        }
        case VALIDATORS_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getMaxTokensFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getAllowListFieldBuilder().getBuilder(),
                  extensionRegistry);
              validatorsCase_ = 2;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getDenyListFieldBuilder().getBuilder(),
                  extensionRegistry);
              validatorsCase_ = 3;
              break;
            } // case 26
            case 32: {
              authorizationType_ = input.readEnum();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int validatorsCase_ = 0;
    private Object validators_;
    public ValidatorsCase
        getValidatorsCase() {
      return ValidatorsCase.forNumber(
          validatorsCase_);
    }

    public Builder clearValidators() {
      validatorsCase_ = 0;
      validators_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private com.cosmos.base.v1beta1.Coin maxTokens_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder> maxTokensBuilder_;
    /**
     * <pre>
     * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
     * empty, there is no spend limit and any amount of coins can be delegated.
     * </pre>
     *
     * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
     * @return Whether the maxTokens field is set.
     */
    public boolean hasMaxTokens() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
     * empty, there is no spend limit and any amount of coins can be delegated.
     * </pre>
     *
     * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
     * @return The maxTokens.
     */
    public com.cosmos.base.v1beta1.Coin getMaxTokens() {
      if (maxTokensBuilder_ == null) {
        return maxTokens_ == null ? com.cosmos.base.v1beta1.Coin.getDefaultInstance() : maxTokens_;
      } else {
        return maxTokensBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
     * empty, there is no spend limit and any amount of coins can be delegated.
     * </pre>
     *
     * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
     */
    public Builder setMaxTokens(com.cosmos.base.v1beta1.Coin value) {
      if (maxTokensBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        maxTokens_ = value;
      } else {
        maxTokensBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
     * empty, there is no spend limit and any amount of coins can be delegated.
     * </pre>
     *
     * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
     */
    public Builder setMaxTokens(
        com.cosmos.base.v1beta1.Coin.Builder builderForValue) {
      if (maxTokensBuilder_ == null) {
        maxTokens_ = builderForValue.build();
      } else {
        maxTokensBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
     * empty, there is no spend limit and any amount of coins can be delegated.
     * </pre>
     *
     * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
     */
    public Builder mergeMaxTokens(com.cosmos.base.v1beta1.Coin value) {
      if (maxTokensBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          maxTokens_ != null &&
          maxTokens_ != com.cosmos.base.v1beta1.Coin.getDefaultInstance()) {
          getMaxTokensBuilder().mergeFrom(value);
        } else {
          maxTokens_ = value;
        }
      } else {
        maxTokensBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
     * empty, there is no spend limit and any amount of coins can be delegated.
     * </pre>
     *
     * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
     */
    public Builder clearMaxTokens() {
      bitField0_ = (bitField0_ & ~0x00000001);
      maxTokens_ = null;
      if (maxTokensBuilder_ != null) {
        maxTokensBuilder_.dispose();
        maxTokensBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
     * empty, there is no spend limit and any amount of coins can be delegated.
     * </pre>
     *
     * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
     */
    public com.cosmos.base.v1beta1.Coin.Builder getMaxTokensBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getMaxTokensFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
     * empty, there is no spend limit and any amount of coins can be delegated.
     * </pre>
     *
     * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
     */
    public com.cosmos.base.v1beta1.CoinOrBuilder getMaxTokensOrBuilder() {
      if (maxTokensBuilder_ != null) {
        return maxTokensBuilder_.getMessageOrBuilder();
      } else {
        return maxTokens_ == null ?
            com.cosmos.base.v1beta1.Coin.getDefaultInstance() : maxTokens_;
      }
    }
    /**
     * <pre>
     * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
     * empty, there is no spend limit and any amount of coins can be delegated.
     * </pre>
     *
     * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder> 
        getMaxTokensFieldBuilder() {
      if (maxTokensBuilder_ == null) {
        maxTokensBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder>(
                getMaxTokens(),
                getParentForChildren(),
                isClean());
        maxTokens_ = null;
      }
      return maxTokensBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        Validators, Validators.Builder, ValidatorsOrBuilder> allowListBuilder_;
    /**
     * <pre>
     * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
     * account.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2 [json_name = "allowList"];</code>
     * @return Whether the allowList field is set.
     */
    @Override
    public boolean hasAllowList() {
      return validatorsCase_ == 2;
    }
    /**
     * <pre>
     * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
     * account.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2 [json_name = "allowList"];</code>
     * @return The allowList.
     */
    @Override
    public Validators getAllowList() {
      if (allowListBuilder_ == null) {
        if (validatorsCase_ == 2) {
          return (Validators) validators_;
        }
        return Validators.getDefaultInstance();
      } else {
        if (validatorsCase_ == 2) {
          return allowListBuilder_.getMessage();
        }
        return Validators.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
     * account.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2 [json_name = "allowList"];</code>
     */
    public Builder setAllowList(Validators value) {
      if (allowListBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        validators_ = value;
        onChanged();
      } else {
        allowListBuilder_.setMessage(value);
      }
      validatorsCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
     * account.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2 [json_name = "allowList"];</code>
     */
    public Builder setAllowList(
        Validators.Builder builderForValue) {
      if (allowListBuilder_ == null) {
        validators_ = builderForValue.build();
        onChanged();
      } else {
        allowListBuilder_.setMessage(builderForValue.build());
      }
      validatorsCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
     * account.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2 [json_name = "allowList"];</code>
     */
    public Builder mergeAllowList(Validators value) {
      if (allowListBuilder_ == null) {
        if (validatorsCase_ == 2 &&
            validators_ != Validators.getDefaultInstance()) {
          validators_ = Validators.newBuilder((Validators) validators_)
              .mergeFrom(value).buildPartial();
        } else {
          validators_ = value;
        }
        onChanged();
      } else {
        if (validatorsCase_ == 2) {
          allowListBuilder_.mergeFrom(value);
        } else {
          allowListBuilder_.setMessage(value);
        }
      }
      validatorsCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
     * account.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2 [json_name = "allowList"];</code>
     */
    public Builder clearAllowList() {
      if (allowListBuilder_ == null) {
        if (validatorsCase_ == 2) {
          validatorsCase_ = 0;
          validators_ = null;
          onChanged();
        }
      } else {
        if (validatorsCase_ == 2) {
          validatorsCase_ = 0;
          validators_ = null;
        }
        allowListBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
     * account.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2 [json_name = "allowList"];</code>
     */
    public Validators.Builder getAllowListBuilder() {
      return getAllowListFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
     * account.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2 [json_name = "allowList"];</code>
     */
    @Override
    public ValidatorsOrBuilder getAllowListOrBuilder() {
      if ((validatorsCase_ == 2) && (allowListBuilder_ != null)) {
        return allowListBuilder_.getMessageOrBuilder();
      } else {
        if (validatorsCase_ == 2) {
          return (Validators) validators_;
        }
        return Validators.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
     * account.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2 [json_name = "allowList"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        Validators, Validators.Builder, ValidatorsOrBuilder>
        getAllowListFieldBuilder() {
      if (allowListBuilder_ == null) {
        if (!(validatorsCase_ == 2)) {
          validators_ = Validators.getDefaultInstance();
        }
        allowListBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            Validators, Validators.Builder, ValidatorsOrBuilder>(
                (Validators) validators_,
                getParentForChildren(),
                isClean());
        validators_ = null;
      }
      validatorsCase_ = 2;
      onChanged();
      return allowListBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        Validators, Validators.Builder, ValidatorsOrBuilder> denyListBuilder_;
    /**
     * <pre>
     * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3 [json_name = "denyList"];</code>
     * @return Whether the denyList field is set.
     */
    @Override
    public boolean hasDenyList() {
      return validatorsCase_ == 3;
    }
    /**
     * <pre>
     * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3 [json_name = "denyList"];</code>
     * @return The denyList.
     */
    @Override
    public Validators getDenyList() {
      if (denyListBuilder_ == null) {
        if (validatorsCase_ == 3) {
          return (Validators) validators_;
        }
        return Validators.getDefaultInstance();
      } else {
        if (validatorsCase_ == 3) {
          return denyListBuilder_.getMessage();
        }
        return Validators.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3 [json_name = "denyList"];</code>
     */
    public Builder setDenyList(Validators value) {
      if (denyListBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        validators_ = value;
        onChanged();
      } else {
        denyListBuilder_.setMessage(value);
      }
      validatorsCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3 [json_name = "denyList"];</code>
     */
    public Builder setDenyList(
        Validators.Builder builderForValue) {
      if (denyListBuilder_ == null) {
        validators_ = builderForValue.build();
        onChanged();
      } else {
        denyListBuilder_.setMessage(builderForValue.build());
      }
      validatorsCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3 [json_name = "denyList"];</code>
     */
    public Builder mergeDenyList(Validators value) {
      if (denyListBuilder_ == null) {
        if (validatorsCase_ == 3 &&
            validators_ != Validators.getDefaultInstance()) {
          validators_ = Validators.newBuilder((Validators) validators_)
              .mergeFrom(value).buildPartial();
        } else {
          validators_ = value;
        }
        onChanged();
      } else {
        if (validatorsCase_ == 3) {
          denyListBuilder_.mergeFrom(value);
        } else {
          denyListBuilder_.setMessage(value);
        }
      }
      validatorsCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3 [json_name = "denyList"];</code>
     */
    public Builder clearDenyList() {
      if (denyListBuilder_ == null) {
        if (validatorsCase_ == 3) {
          validatorsCase_ = 0;
          validators_ = null;
          onChanged();
        }
      } else {
        if (validatorsCase_ == 3) {
          validatorsCase_ = 0;
          validators_ = null;
        }
        denyListBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3 [json_name = "denyList"];</code>
     */
    public Validators.Builder getDenyListBuilder() {
      return getDenyListFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3 [json_name = "denyList"];</code>
     */
    @Override
    public ValidatorsOrBuilder getDenyListOrBuilder() {
      if ((validatorsCase_ == 3) && (denyListBuilder_ != null)) {
        return denyListBuilder_.getMessageOrBuilder();
      } else {
        if (validatorsCase_ == 3) {
          return (Validators) validators_;
        }
        return Validators.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3 [json_name = "denyList"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        Validators, Validators.Builder, ValidatorsOrBuilder>
        getDenyListFieldBuilder() {
      if (denyListBuilder_ == null) {
        if (!(validatorsCase_ == 3)) {
          validators_ = Validators.getDefaultInstance();
        }
        denyListBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            Validators, Validators.Builder, ValidatorsOrBuilder>(
                (Validators) validators_,
                getParentForChildren(),
                isClean());
        validators_ = null;
      }
      validatorsCase_ = 3;
      onChanged();
      return denyListBuilder_;
    }

    private int authorizationType_ = 0;
    /**
     * <pre>
     * authorization_type defines one of AuthorizationType.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.AuthorizationType authorization_type = 4 [json_name = "authorizationType"];</code>
     * @return The enum numeric value on the wire for authorizationType.
     */
    @Override public int getAuthorizationTypeValue() {
      return authorizationType_;
    }
    /**
     * <pre>
     * authorization_type defines one of AuthorizationType.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.AuthorizationType authorization_type = 4 [json_name = "authorizationType"];</code>
     * @param value The enum numeric value on the wire for authorizationType to set.
     * @return This builder for chaining.
     */
    public Builder setAuthorizationTypeValue(int value) {
      authorizationType_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * authorization_type defines one of AuthorizationType.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.AuthorizationType authorization_type = 4 [json_name = "authorizationType"];</code>
     * @return The authorizationType.
     */
    @Override
    public AuthorizationType getAuthorizationType() {
      AuthorizationType result = AuthorizationType.forNumber(authorizationType_);
      return result == null ? AuthorizationType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * authorization_type defines one of AuthorizationType.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.AuthorizationType authorization_type = 4 [json_name = "authorizationType"];</code>
     * @param value The authorizationType to set.
     * @return This builder for chaining.
     */
    public Builder setAuthorizationType(AuthorizationType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000008;
      authorizationType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * authorization_type defines one of AuthorizationType.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.AuthorizationType authorization_type = 4 [json_name = "authorizationType"];</code>
     * @return This builder for chaining.
     */
    public Builder clearAuthorizationType() {
      bitField0_ = (bitField0_ & ~0x00000008);
      authorizationType_ = 0;
      onChanged();
      return this;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:cosmos.staking.v1beta1.StakeAuthorization)
  }

  // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.StakeAuthorization)
  private static final StakeAuthorization DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new StakeAuthorization();
  }

  public static StakeAuthorization getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<StakeAuthorization>
      PARSER = new com.google.protobuf.AbstractParser<StakeAuthorization>() {
    @Override
    public StakeAuthorization parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<StakeAuthorization> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<StakeAuthorization> getParserForType() {
    return PARSER;
  }

  @Override
  public StakeAuthorization getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

